###############################################################################
#                                                                             #
# IAR C/C++ Compiler V8.30.1.41636 for 8051             31/Jul/2014  18:31:38 #
# Copyright 2004-2013 IAR Systems AB.                                         #
#                                                                             #
#    Core               =  plain                                              #
#    Code model         =  banked                                             #
#    Data model         =  large                                              #
#    Calling convention =  xdata reentrant                                    #
#    Constant location  =  data_rom                                           #
#    Dptr setup         =  1,16                                               #
#                                                                             #
#    Source file        =  C:\Texas Instruments\ZStack-CC2530-2.5.1a\Projects #
#                          \zstack\Samples\ParkWay\Source\PW_Coordinator.c    #
#    Command line       =  -f "C:\Texas Instruments\ZStack-CC2530-2.5.1a\Proj #
#                          ects\zstack\Samples\ParkWay\CC2530DB\..\..\..\Tool #
#                          s\CC2530DB\f8wCoord.cfg" (-DCPU32MHZ               #
#                          -DROOT=__near_func -DMAC_CFG_APP_PENDING_QUEUE=TRU #
#                          E -DMAC_CFG_TX_DATA_MAX=5 -DMAC_CFG_TX_MAX=8       #
#                          -DMAC_CFG_RX_MAX=5 -DZDO_COORDINATOR -DRTR_NWK)    #
#                          -f "C:\Texas Instruments\ZStack-CC2530-2.5.1a\Proj #
#                          ects\zstack\Samples\ParkWay\CC2530DB\..\..\..\Tool #
#                          s\CC2530DB\f8wConfig.cfg" (-DZIGBEEPRO -DSECURE=0  #
#                          -DZG_SECURE_DYNAMIC=0 -DREFLECTOR                  #
#                          -DDEFAULT_CHANLIST=0x00000800                      #
#                          -DZDAPP_CONFIG_PAN_ID=0xFFFF                       #
#                          -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_MA #
#                          SK=0x007F -DBEACON_REQUEST_DELAY=100               #
#                          -DBEACON_REQ_DELAY_MASK=0x00FF                     #
#                          -DLINK_STATUS_JITTER_MASK=0x007F                   #
#                          -DROUTE_EXPIRY_TIME=30 -DAPSC_ACK_WAIT_DURATION_PO #
#                          LLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7             #
#                          -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3    #
#                          -DNWK_MAX_DATA_RETRIES=2                           #
#                          -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9         #
#                          -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40           #
#                          -DNWK_MAX_BINDING_ENTRIES=4                        #
#                          -DMAX_BINDING_CLUSTER_IDS=4 "-DDEFAULT_KEY={0x01,  #
#                          0x03, 0x05, 0x07, 0x09, 0x0B, 0x0D, 0x0F, 0x00,    #
#                          0x02, 0x04, 0x06, 0x08, 0x0A, 0x0C, 0x0D}"         #
#                          -DMAC_MAX_FRAME_SIZE=116                           #
#                          -DZDNWKMGR_MIN_TRANSMISSIONS=20 "-DCONST=const     #
#                          __code" -DGENERIC=__generic                        #
#                          -DRFD_RCVC_ALWAYS_ON=FALSE -DPOLL_RATE=1000        #
#                          -DQUEUED_POLL_RATE=100 -DRESPONSE_POLL_RATE=100)   #
#                          -DREJOIN_POLL_RATE=440 "C:\Texas                   #
#                          Instruments\ZStack-CC2530-2.5.1a\Projects\zstack\S #
#                          amples\ParkWay\Source\PW_Coordinator.c" -D         #
#                          ZTOOL_P1 -D MT_TASK -D MT_SYS_FUNC -D MT_ZDO_FUNC  #
#                          -D xLCD_SUPPORTED -D NV_RESTORE -lC "C:\Texas      #
#                          Instruments\ZStack-CC2530-2.5.1a\Projects\zstack\S #
#                          amples\ParkWay\CC2530DB\CoordinatorEB\List\" -lA   #
#                          "C:\Texas Instruments\ZStack-CC2530-2.5.1a\Project #
#                          s\zstack\Samples\ParkWay\CC2530DB\CoordinatorEB\Li #
#                          st\" --diag_suppress Pe001,Pa010 -o "C:\Texas      #
#                          Instruments\ZStack-CC2530-2.5.1a\Projects\zstack\S #
#                          amples\ParkWay\CC2530DB\CoordinatorEB\Obj\" -e     #
#                          --no_code_motion --debug --core=plain --dptr=16,1  #
#                          --data_model=large --code_model=banked             #
#                          --calling_convention=xdata_reentrant               #
#                          --place_constants=data_rom --nr_virtual_regs 8 -I  #
#                          "C:\Texas Instruments\ZStack-CC2530-2.5.1a\Project #
#                          s\zstack\Samples\ParkWay\CC2530DB\" -I "C:\Texas   #
#                          Instruments\ZStack-CC2530-2.5.1a\Projects\zstack\S #
#                          amples\ParkWay\CC2530DB\..\Source\" -I "C:\Texas   #
#                          Instruments\ZStack-CC2530-2.5.1a\Projects\zstack\S #
#                          amples\ParkWay\CC2530DB\..\..\..\ZMain\TI2530DB\"  #
#                          -I "C:\Texas Instruments\ZStack-CC2530-2.5.1a\Proj #
#                          ects\zstack\Samples\ParkWay\CC2530DB\..\..\..\..\. #
#                          .\Components\hal\include\" -I "C:\Texas            #
#                          Instruments\ZStack-CC2530-2.5.1a\Projects\zstack\S #
#                          amples\ParkWay\CC2530DB\..\..\..\..\..\Components\ #
#                          hal\target\CC2530EB\" -I "C:\Texas                 #
#                          Instruments\ZStack-CC2530-2.5.1a\Projects\zstack\S #
#                          amples\ParkWay\CC2530DB\..\..\..\..\..\Components\ #
#                          mac\include\" -I "C:\Texas                         #
#                          Instruments\ZStack-CC2530-2.5.1a\Projects\zstack\S #
#                          amples\ParkWay\CC2530DB\..\..\..\..\..\Components\ #
#                          mac\high_level\" -I "C:\Texas                      #
#                          Instruments\ZStack-CC2530-2.5.1a\Projects\zstack\S #
#                          amples\ParkWay\CC2530DB\..\..\..\..\..\Components\ #
#                          mac\low_level\srf04\" -I "C:\Texas                 #
#                          Instruments\ZStack-CC2530-2.5.1a\Projects\zstack\S #
#                          amples\ParkWay\CC2530DB\..\..\..\..\..\Components\ #
#                          mac\low_level\srf04\single_chip\" -I "C:\Texas     #
#                          Instruments\ZStack-CC2530-2.5.1a\Projects\zstack\S #
#                          amples\ParkWay\CC2530DB\..\..\..\..\..\Components\ #
#                          mt\" -I "C:\Texas Instruments\ZStack-CC2530-2.5.1a #
#                          \Projects\zstack\Samples\ParkWay\CC2530DB\..\..\.. #
#                          \..\..\Components\osal\include\" -I "C:\Texas      #
#                          Instruments\ZStack-CC2530-2.5.1a\Projects\zstack\S #
#                          amples\ParkWay\CC2530DB\..\..\..\..\..\Components\ #
#                          services\saddr\" -I "C:\Texas                      #
#                          Instruments\ZStack-CC2530-2.5.1a\Projects\zstack\S #
#                          amples\ParkWay\CC2530DB\..\..\..\..\..\Components\ #
#                          services\sdata\" -I "C:\Texas                      #
#                          Instruments\ZStack-CC2530-2.5.1a\Projects\zstack\S #
#                          amples\ParkWay\CC2530DB\..\..\..\..\..\Components\ #
#                          stack\af\" -I "C:\Texas Instruments\ZStack-CC2530- #
#                          2.5.1a\Projects\zstack\Samples\ParkWay\CC2530DB\.. #
#                          \..\..\..\..\Components\stack\nwk\" -I "C:\Texas   #
#                          Instruments\ZStack-CC2530-2.5.1a\Projects\zstack\S #
#                          amples\ParkWay\CC2530DB\..\..\..\..\..\Components\ #
#                          stack\sapi\" -I "C:\Texas                          #
#                          Instruments\ZStack-CC2530-2.5.1a\Projects\zstack\S #
#                          amples\ParkWay\CC2530DB\..\..\..\..\..\Components\ #
#                          stack\sec\" -I "C:\Texas                           #
#                          Instruments\ZStack-CC2530-2.5.1a\Projects\zstack\S #
#                          amples\ParkWay\CC2530DB\..\..\..\..\..\Components\ #
#                          stack\sys\" -I "C:\Texas                           #
#                          Instruments\ZStack-CC2530-2.5.1a\Projects\zstack\S #
#                          amples\ParkWay\CC2530DB\..\..\..\..\..\Components\ #
#                          stack\zdo\" -I "C:\Texas                           #
#                          Instruments\ZStack-CC2530-2.5.1a\Projects\zstack\S #
#                          amples\ParkWay\CC2530DB\..\..\..\..\..\Components\ #
#                          zmac\" -I "C:\Texas Instruments\ZStack-CC2530-2.5. #
#                          1a\Projects\zstack\Samples\ParkWay\CC2530DB\..\..\ #
#                          ..\..\..\Components\zmac\f8w\" -Ohz                #
#                          --require_prototypes                               #
#    List file          =  C:\Texas Instruments\ZStack-CC2530-2.5.1a\Projects #
#                          \zstack\Samples\ParkWay\CC2530DB\CoordinatorEB\Lis #
#                          t\PW_Coordinator.lst                               #
#    Object file        =  C:\Texas Instruments\ZStack-CC2530-2.5.1a\Projects #
#                          \zstack\Samples\ParkWay\CC2530DB\CoordinatorEB\Obj #
#                          \PW_Coordinator.r51                                #
#                                                                             #
#                                                                             #
###############################################################################

C:\Texas Instruments\ZStack-CC2530-2.5.1a\Projects\zstack\Samples\ParkWay\Source\PW_Coordinator.c
      1          /*****************************************************************************
      2            Project: Park Way (ZigBee)
      3            Coordinator Firmware
      4          
      5            Ver.: 1.0
      6            Date: 27/06/14
      7            Developer:  Ânderson Ignácio da Silva
      8            Obs.:
      9              -LCD_SUPPORTED=DEBUG or LCD_SUPPORTED must be disable in the CC2530 China 
     10              modules to work
     11              
     12              -BEFORE PROGRAMMING is important to ERASE the FLASH memory with the FLASH
     13              programmer because the NV_RESTORE option is enabled  to restore the  End 
     14              Devices after the coordinator power down
     15          
     16              -When the board has PA_LNA RANGE EXTENDER, it must be necessary to cut off
     17              the 'x' from the defines of #define xHAL_PA_LNA of the hal_board_cfg.h
     18          
     19            Pre-processor directives:
     20              ZTOOL_P1
     21              MT_TASK
     22              MT_SYS_FUNC
     23              MT_ZDO_FUNC
     24              xLCD_SUPPORTED
     25              NV_RESTORE
     26          
     27          *****************************************************************************/
     28          
     29          
     30          /*********************************************************************
     31           * INCLUDES
     32           */
     33          #include "OSAL.h"
     34          #include "AF.h"
     35          #include "ZDApp.h"
     36          #include "ZDObject.h"
     37          #include "ZDProfile.h"
     38          #include "ParkWay.h"
     39          #include "DebugTrace.h"
     40          #include "OnBoard.h"
     41          /* HAL */
     42          #include "hal_lcd.h"
     43          #include "hal_led.h"
     44          #include "hal_key.h"
     45          #include "hal_uart.h"
     46           
     47          
     48          /*********************************************************************
     49           * MACROS
     50           */
     51          
     52          /*********************************************************************
     53           * CONSTANTS
     54           */
     55          #define   TIME_PARKWAY_POLL   2000    //Control the time of polling of the read devices
     56          /*********************************************************************
     57           * TYPEDEFS
     58           */
     59          
     60          /*********************************************************************
     61           * GLOBAL VARIABLES
     62           */
     63          //afAddrType_t           teste;   //This store the address of the last peer connected to the coordinator
     64          
     65          // This list should be filled with Application specific Cluster IDs.

   \                                 In  segment XDATA_ROM_C, align 1
     66          const cId_t ParkWay_ClusterList[ParkWay_MAX_CLUSTERS] =
   \                     ParkWay_ClusterList:
   \   000000   0100         DW 1
     67          {
     68            ParkWay_CLUSTERID
     69          };
     70          

   \                                 In  segment XDATA_ROM_C, align 1
     71          const SimpleDescriptionFormat_t ParkWay_SimpleDesc =
   \                     ParkWay_SimpleDesc:
   \   000000   0A           DB 10
   \   000001   040F         DW 3844
   \   000003   0100         DW 1
   \   000005   00           DB 0
   \   000006   01           DB 1
   \   000007   ....         DW ParkWay_ClusterList
   \   000009   01           DB 1
   \   00000A   ....         DW ParkWay_ClusterList
     72          {
     73            ParkWay_ENDPOINT,              //  int Endpoint;
     74            ParkWay_PROFID,                //  uint16 AppProfId[2];
     75            ParkWay_DEVICEID,              //  uint16 AppDeviceId[2];
     76            ParkWay_DEVICE_VERSION,        //  int   AppDevVer:4;
     77            ParkWay_FLAGS,                 //  int   AppFlags:4;
     78            ParkWay_MAX_CLUSTERS,          //  byte  AppNumInClusters;
     79            (cId_t *)ParkWay_ClusterList,  //  byte *pAppInClusterList;
     80            ParkWay_MAX_CLUSTERS,          //  byte  AppNumInClusters;
     81            (cId_t *)ParkWay_ClusterList   //  byte *pAppInClusterList;
     82          };
     83          
     84          // This is the Endpoint/Interface description.  It is defined here, but
     85          // filled-in in ParkWay_Init().  Another way to go would be to fill
     86          // in the structure here and make it a "const" (in code space).  The
     87          // way it's defined in this sample app it is define in RAM.

   \                                 In  segment XDATA_Z, align 1, keep-with-next
     88          endPointDesc_t ParkWay_epDesc;
   \                     ParkWay_epDesc:
   \   000000                DS 6
   \   000006                REQUIRE __INIT_XDATA_Z
     89          
     90          /*********************************************************************
     91           * EXTERNAL VARIABLES
     92           */
     93          
     94          /*********************************************************************
     95           * EXTERNAL FUNCTIONS
     96           */
     97          
     98          /*********************************************************************
     99           * LOCAL VARIABLES
    100           */

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    101          byte ParkWay_TaskID;   // Task ID for internal task/event processing
   \                     ParkWay_TaskID:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    102                                    // This variable will be received when
    103                                    // ParkWay_Init() is called.

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    104          devStates_t ParkWay_NwkState;
   \                     ParkWay_NwkState:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    105          
    106          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    107          byte ParkWay_TransID;  // This is the unique message ID (counter)
   \                     ParkWay_TransID:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    108          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    109          afAddrType_t ParkWay_DstAddr;
   \                     ParkWay_DstAddr:
   \   000000                DS 12
   \   00000C                REQUIRE __INIT_XDATA_Z
    110          
    111          /*********************************************************************
    112           * LOCAL FUNCTIONS
    113           */
    114          void SendUART(uint8 *data,uint8 len);
    115          void uart_init(void);

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    116          static uint8 DevListPW[20][6];        //Devices Vector for PARK WAY 
   \                     DevListPW:
   \   000000                DS 120
   \   000078                REQUIRE __INIT_XDATA_Z
    117          
    118          static void ParkWay_ProcessZDOMsgs( zdoIncomingMsg_t *inMsg );
    119          //static void ParkWay_HandleKeys( byte shift, byte keys );
    120          static void ParkWay_MessageMSGCB( afIncomingMSGPacket_t *pckt );
    121          //static void ParkWay_SendTheMessage( void );
    122          
    123          /*********************************************************************
    124           * NETWORK LAYER CALLBACKS
    125           */
    126          
    127          /*********************************************************************
    128           * PUBLIC FUNCTIONS
    129           */
    130          
    131          //Initialization function for the Park Way task. This is called during initialization and should contain any application specific initialization (ie. hardware initialization/setup, table initialization, power up notificaiton ... )

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    132          void ParkWay_Init( uint8 task_id )
   \                     ParkWay_Init:
    133          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   \   000005   E9           MOV     A,R1
    134            ParkWay_TaskID = task_id;
   \   000006   90....       MOV     DPTR,#ParkWay_TaskID
   \   000009   F0           MOVX    @DPTR,A
    135            ParkWay_NwkState = DEV_INIT;
   \   00000A   90....       MOV     DPTR,#ParkWay_NwkState
   \   00000D   7401         MOV     A,#0x1
   \   00000F   F0           MOVX    @DPTR,A
    136            ParkWay_TransID = 0;
   \   000010   90....       MOV     DPTR,#ParkWay_TransID
   \   000013   E4           CLR     A
   \   000014   F0           MOVX    @DPTR,A
    137          
    138            // Device hardware initialization can be added here or in main() (Zmain.c).
    139            // If the hardware is application specific - add it here.
    140            // If the hardware is other parts of the device add it in main().
    141          
    142            ParkWay_DstAddr.addrMode = (afAddrMode_t)AddrNotPresent;
   \   000015   90....       MOV     DPTR,#ParkWay_DstAddr + 8
   \   000018   F0           MOVX    @DPTR,A
    143            ParkWay_DstAddr.endPoint = 0;
   \   000019   A3           INC     DPTR
   \   00001A   F0           MOVX    @DPTR,A
    144            ParkWay_DstAddr.addr.shortAddr = 0;
   \   00001B   90....       MOV     DPTR,#ParkWay_DstAddr
   \   00001E   F0           MOVX    @DPTR,A
   \   00001F   A3           INC     DPTR
   \   000020   F0           MOVX    @DPTR,A
    145          
    146            // Fill out the endpoint description.
    147            ParkWay_epDesc.endPoint = ParkWay_ENDPOINT;
   \   000021   90....       MOV     DPTR,#ParkWay_epDesc
   \   000024   740A         MOV     A,#0xa
   \   000026   F0           MOVX    @DPTR,A
    148            ParkWay_epDesc.task_id = &ParkWay_TaskID;
   \   000027   A3           INC     DPTR
   \   000028   74..         MOV     A,#ParkWay_TaskID & 0xff
   \   00002A   F0           MOVX    @DPTR,A
   \   00002B   A3           INC     DPTR
   \   00002C   74..         MOV     A,#(ParkWay_TaskID >> 8) & 0xff
   \   00002E   F0           MOVX    @DPTR,A
    149            ParkWay_epDesc.simpleDesc
    150                      = (SimpleDescriptionFormat_t *)&ParkWay_SimpleDesc;
   \   00002F   A3           INC     DPTR
   \   000030   74..         MOV     A,#ParkWay_SimpleDesc & 0xff
   \   000032   F0           MOVX    @DPTR,A
   \   000033   A3           INC     DPTR
   \   000034   74..         MOV     A,#(ParkWay_SimpleDesc >> 8) & 0xff
   \   000036   F0           MOVX    @DPTR,A
    151            ParkWay_epDesc.latencyReq = noLatencyReqs;
   \   000037   A3           INC     DPTR
   \   000038   E4           CLR     A
   \   000039   F0           MOVX    @DPTR,A
    152          
    153            // Register the endpoint description with the AF
    154            afRegister( &ParkWay_epDesc );
   \   00003A                ; Setup parameters for call to function afRegister
   \   00003A   7A..         MOV     R2,#ParkWay_epDesc & 0xff
   \   00003C   7B..         MOV     R3,#(ParkWay_epDesc >> 8) & 0xff
   \   00003E   12....       LCALL   ??afRegister?relay   ; Banked call to: afRegister
    155          
    156            // Register for all key events - This app will handle all key events
    157            RegisterForKeys( ParkWay_TaskID );
   \   000041                ; Setup parameters for call to function RegisterForKeys
   \   000041   90....       MOV     DPTR,#ParkWay_TaskID
   \   000044   E0           MOVX    A,@DPTR
   \   000045   F9           MOV     R1,A
   \   000046   12....       LCALL   ??RegisterForKeys?relay; Banked call to: RegisterForKeys
    158          
    159            // Update the display
    160          #if defined ( LCD_SUPPORTED )
    161            HalLcdWriteString( "ParkWay-Coord", HAL_LCD_LINE_1 );
    162          #endif
    163          
    164            ZDO_RegisterForZDOMsg( ParkWay_TaskID, End_Device_Bind_rsp );
   \   000049                ; Setup parameters for call to function ZDO_RegisterForZDOMsg
   \   000049   7A20         MOV     R2,#0x20
   \   00004B   7B80         MOV     R3,#-0x80
   \   00004D   90....       MOV     DPTR,#ParkWay_TaskID
   \   000050   E0           MOVX    A,@DPTR
   \   000051   F9           MOV     R1,A
   \   000052   12....       LCALL   ??ZDO_RegisterForZDOMsg?relay; Banked call to: ZDO_RegisterForZDOMsg
    165            ZDO_RegisterForZDOMsg( ParkWay_TaskID, Match_Desc_rsp );
   \   000055                ; Setup parameters for call to function ZDO_RegisterForZDOMsg
   \   000055   7A06         MOV     R2,#0x6
   \   000057   7B80         MOV     R3,#-0x80
   \   000059   90....       MOV     DPTR,#ParkWay_TaskID
   \   00005C   E0           MOVX    A,@DPTR
   \   00005D   F9           MOV     R1,A
   \   00005E   12....       LCALL   ??ZDO_RegisterForZDOMsg?relay; Banked call to: ZDO_RegisterForZDOMsg
    166          
    167            osal_start_timerEx(   ParkWay_TaskID,
    168                                  POLL_PARWAY_EVT,
    169                                  TIME_PARKWAY_POLL);
   \   000061                ; Setup parameters for call to function osal_start_timerEx
   \   000061   7CD0         MOV     R4,#-0x30
   \   000063   7D07         MOV     R5,#0x7
   \   000065   7A03         MOV     R2,#0x3
   \   000067   7B00         MOV     R3,#0x0
   \   000069   90....       MOV     DPTR,#ParkWay_TaskID
   \   00006C   E0           MOVX    A,@DPTR
   \   00006D   F9           MOV     R1,A
   \   00006E   12....       LCALL   ??osal_start_timerEx?relay; Banked call to: osal_start_timerEx
    170          }
   \   000071                REQUIRE ?Subroutine0
   \   000071                ; // Fall through to label ?Subroutine0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine0:
   \   000000   7F01         MOV     R7,#0x1
   \   000002   02....       LJMP    ?BANKED_LEAVE_XDATA
    171          
    172          //Main function to proccess the timers and events 

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    173          uint16 ParkWay_ProcessEvent( uint8 task_id, uint16 events )
   \                     ParkWay_ProcessEvent:
    174          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000   74F3         MOV     A,#-0xd
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 13
   \   000005                ; Auto size: 0
   \   000005   EA           MOV     A,R2
   \   000006   FE           MOV     R6,A
   \   000007   EB           MOV     A,R3
   \   000008   FF           MOV     R7,A
    175            afIncomingMSGPacket_t *MSGpkt;
    176            //afDataConfirm_t *afDataConfirm;
    177            //zAddrType_t dstAddr;
    178            // Data Confirmation message fields
    179            //byte sentEP;
    180            //ZStatus_t sentStatus;
    181            //byte sentTransID;       // This should match the value sent
    182            (void)task_id;  // Intentionally unreferenced parameter
    183          
    184            if ( events & SYS_EVENT_MSG )
   \   000009   5480         ANL     A,#0x80
   \   00000B   7003         JNZ     $+5
   \   00000D   02....       LJMP    ??ParkWay_ProcessEvent_0 & 0xFFFF
    185            {
    186              MSGpkt = (afIncomingMSGPacket_t *)osal_msg_receive( ParkWay_TaskID );
   \   000010                ; Setup parameters for call to function osal_msg_receive
   \   000010   806B         SJMP    ??ParkWay_ProcessEvent_1
    187              while ( MSGpkt )
    188              {
    189                switch ( MSGpkt->hdr.event )
    190                {
    191                  case ZDO_CB_MSG: //Event trigger by ZigBee Device Object like connect, bind...etc
    192                    ParkWay_ProcessZDOMsgs( (zdoIncomingMsg_t *)MSGpkt );
    193                    break;
    194          
    195                  case AF_DATA_CONFIRM_CMD: //Event trigger by a confirmation of sent message
    196                    break;
    197          
    198                  case AF_INCOMING_MSG_CMD: //Event trigger by a receive message
    199                    ParkWay_MessageMSGCB( MSGpkt );
   \                     ??ParkWay_ProcessEvent_2:
   \   000012   E5..         MOV     A,?V0
   \   000014   2422         ADD     A,#0x22
   \   000016   F582         MOV     DPL,A
   \   000018   E4           CLR     A
   \   000019   35..         ADDC    A,?V1
   \   00001B   F583         MOV     DPH,A
   \   00001D   E0           MOVX    A,@DPTR
   \   00001E   F8           MOV     R0,A
   \   00001F   A3           INC     DPTR
   \   000020   E0           MOVX    A,@DPTR
   \   000021   F9           MOV     R1,A
   \   000022   8882         MOV     DPL,R0
   \   000024   8983         MOV     DPH,R1
   \   000026   A3           INC     DPTR
   \   000027   A3           INC     DPTR
   \   000028   A3           INC     DPTR
   \   000029   E0           MOVX    A,@DPTR
   \   00002A   FA           MOV     R2,A
   \   00002B   75F00A       MOV     B,#0xa
   \   00002E   8882         MOV     DPL,R0
   \   000030   8983         MOV     DPH,R1
   \   000032   A3           INC     DPTR
   \   000033   A3           INC     DPTR
   \   000034   E0           MOVX    A,@DPTR
   \   000035   A4           MUL     AB
   \   000036   2A           ADD     A,R2
   \   000037   24F0         ADD     A,#-0x10
   \   000039   F5..         MOV     ?V4,A
   \   00003B   75..00       MOV     ?V3,#0x0
   \                     ??ParkWay_ProcessEvent_3:
   \   00003E   85..82       MOV     DPL,?V3
   \   000041   AA82         MOV     R2,DPL
   \   000043   E8           MOV     A,R0
   \   000044   2A           ADD     A,R2
   \   000045   F582         MOV     DPL,A
   \   000047   E4           CLR     A
   \   000048   39           ADDC    A,R1
   \   000049   F583         MOV     DPH,A
   \   00004B   E0           MOVX    A,@DPTR
   \   00004C   C0E0         PUSH    A
   \   00004E   E5..         MOV     A,?V4
   \   000050   75F006       MOV     B,#0x6
   \   000053   A4           MUL     AB
   \   000054   FC           MOV     R4,A
   \   000055   85F0..       MOV     ?V2,B
   \   000058   AD..         MOV     R5,?V2
   \   00005A   74..         MOV     A,#DevListPW & 0xff
   \   00005C   2C           ADD     A,R4
   \   00005D   FC           MOV     R4,A
   \   00005E   74..         MOV     A,#(DevListPW >> 8) & 0xff
   \   000060   3D           ADDC    A,R5
   \   000061   FD           MOV     R5,A
   \   000062   EC           MOV     A,R4
   \   000063   2A           ADD     A,R2
   \   000064   F582         MOV     DPL,A
   \   000066   E4           CLR     A
   \   000067   3D           ADDC    A,R5
   \   000068   F583         MOV     DPH,A
   \   00006A   D0E0         POP     A
   \   00006C   F0           MOVX    @DPTR,A
   \   00006D   05..         INC     ?V3
   \   00006F   E5..         MOV     A,?V3
   \   000071   C3           CLR     C
   \   000072   9406         SUBB    A,#0x6
   \   000074   40C8         JC      ??ParkWay_ProcessEvent_3
    200                    break;
    201          
    202                  // case ZDO_STATE_CHANGE:
    203                  //   break;
    204          
    205                  default:
    206                    break;
    207                }
    208          
    209                // Release the memory
    210                osal_msg_deallocate( (uint8 *)MSGpkt );
   \                     ??ParkWay_ProcessEvent_4:
   \   000076                ; Setup parameters for call to function osal_msg_deallocate
   \   000076   AA..         MOV     R2,?V0
   \   000078   AB..         MOV     R3,?V1
   \   00007A   12....       LCALL   ??osal_msg_deallocate?relay; Banked call to: osal_msg_deallocate
    211          
    212                // Next
    213                MSGpkt = (afIncomingMSGPacket_t *)osal_msg_receive( ParkWay_TaskID );
   \   00007D                ; Setup parameters for call to function osal_msg_receive
   \                     ??ParkWay_ProcessEvent_1:
   \   00007D   90....       MOV     DPTR,#ParkWay_TaskID
   \   000080   E0           MOVX    A,@DPTR
   \   000081   F9           MOV     R1,A
   \   000082   12....       LCALL   ??osal_msg_receive?relay; Banked call to: osal_msg_receive
   \   000085   8A..         MOV     ?V0,R2
   \   000087   8B..         MOV     ?V1,R3
   \   000089   E5..         MOV     A,?V0
   \   00008B   45..         ORL     A,?V1
   \   00008D   606B         JZ      ??ParkWay_ProcessEvent_5
   \   00008F   85..82       MOV     DPL,?V0
   \   000092   85..83       MOV     DPH,?V1
   \   000095   E0           MOVX    A,@DPTR
   \   000096   24E6         ADD     A,#-0x1a
   \   000098   7003         JNZ     $+5
   \   00009A   02....       LJMP    ??ParkWay_ProcessEvent_2 & 0xFFFF
   \   00009D   2447         ADD     A,#0x47
   \   00009F   70D5         JNZ     ??ParkWay_ProcessEvent_4
   \   0000A1   E5..         MOV     A,?V0
   \   0000A3   240C         ADD     A,#0xc
   \   0000A5   F582         MOV     DPL,A
   \   0000A7   E4           CLR     A
   \   0000A8   35..         ADDC    A,?V1
   \   0000AA   F583         MOV     DPH,A
   \   0000AC   E0           MOVX    A,@DPTR
   \   0000AD   6406         XRL     A,#0x6
   \   0000AF   7004         JNZ     ??ParkWay_ProcessEvent_6
   \   0000B1   A3           INC     DPTR
   \   0000B2   E0           MOVX    A,@DPTR
   \   0000B3   6480         XRL     A,#0x80
   \                     ??ParkWay_ProcessEvent_6:
   \   0000B5   70BF         JNZ     ??ParkWay_ProcessEvent_4
   \   0000B7                ; Setup parameters for call to function ZDO_ParseEPListRsp
   \   0000B7   AA..         MOV     R2,?V0
   \   0000B9   AB..         MOV     R3,?V1
   \   0000BB   12....       LCALL   ??ZDO_ParseEPListRsp?relay; Banked call to: ZDO_ParseEPListRsp
   \   0000BE   EA           MOV     A,R2
   \   0000BF   4B           ORL     A,R3
   \   0000C0   60B4         JZ      ??ParkWay_ProcessEvent_4
   \   0000C2   8A82         MOV     DPL,R2
   \   0000C4   8B83         MOV     DPH,R3
   \   0000C6   E0           MOVX    A,@DPTR
   \   0000C7   702B         JNZ     ??ParkWay_ProcessEvent_7
   \   0000C9   A3           INC     DPTR
   \   0000CA   A3           INC     DPTR
   \   0000CB   A3           INC     DPTR
   \   0000CC   E0           MOVX    A,@DPTR
   \   0000CD   6025         JZ      ??ParkWay_ProcessEvent_7
   \   0000CF   90....       MOV     DPTR,#ParkWay_DstAddr + 8
   \   0000D2   7402         MOV     A,#0x2
   \   0000D4   F0           MOVX    @DPTR,A
   \   0000D5   8A82         MOV     DPL,R2
   \   0000D7   8B83         MOV     DPH,R3
   \   0000D9   A3           INC     DPTR
   \   0000DA   E0           MOVX    A,@DPTR
   \   0000DB   F8           MOV     R0,A
   \   0000DC   A3           INC     DPTR
   \   0000DD   E0           MOVX    A,@DPTR
   \   0000DE   F9           MOV     R1,A
   \   0000DF   90....       MOV     DPTR,#ParkWay_DstAddr
   \   0000E2   E8           MOV     A,R0
   \   0000E3   F0           MOVX    @DPTR,A
   \   0000E4   A3           INC     DPTR
   \   0000E5   E9           MOV     A,R1
   \   0000E6   F0           MOVX    @DPTR,A
   \   0000E7   8A82         MOV     DPL,R2
   \   0000E9   8B83         MOV     DPH,R3
   \   0000EB   A3           INC     DPTR
   \   0000EC   A3           INC     DPTR
   \   0000ED   A3           INC     DPTR
   \   0000EE   A3           INC     DPTR
   \   0000EF   E0           MOVX    A,@DPTR
   \   0000F0   90....       MOV     DPTR,#ParkWay_DstAddr + 9
   \   0000F3   F0           MOVX    @DPTR,A
   \                     ??ParkWay_ProcessEvent_7:
   \   0000F4                ; Setup parameters for call to function osal_mem_free
   \   0000F4   12....       LCALL   ??osal_mem_free?relay; Banked call to: osal_mem_free
   \   0000F7   02....       LJMP    ??ParkWay_ProcessEvent_4 & 0xFFFF
    214              }
    215          
    216              // return unprocessed events
    217              return (events ^ SYS_EVENT_MSG);
   \                     ??ParkWay_ProcessEvent_5:
   \   0000FA   EE           MOV     A,R6
   \   0000FB   FA           MOV     R2,A
   \   0000FC   EF           MOV     A,R7
   \   0000FD   6480         XRL     A,#0x80
   \   0000FF   FB           MOV     R3,A
   \   000100   02....       LJMP    ??ParkWay_ProcessEvent_8 & 0xFFFF
    218            }
    219          
    220            if(events & POLL_PARWAY_EVT)    //This sequence poll the stack of devices connected, cleaning the flags after print in the UART port
   \                     ??ParkWay_ProcessEvent_0:
   \   000103   EE           MOV     A,R6
   \   000104   5403         ANL     A,#0x3
   \   000106   7003         JNZ     $+5
   \   000108   02....       LJMP    ??ParkWay_ProcessEvent_9 & 0xFFFF
    221            {
    222              osal_start_timerEx( ParkWay_TaskID,
    223                                  POLL_PARWAY_EVT,
    224                                  TIME_PARKWAY_POLL);
   \   00010B                ; Setup parameters for call to function osal_start_timerEx
   \   00010B   7CD0         MOV     R4,#-0x30
   \   00010D   7D07         MOV     R5,#0x7
   \   00010F   7A03         MOV     R2,#0x3
   \   000111   7B00         MOV     R3,#0x0
   \   000113   90....       MOV     DPTR,#ParkWay_TaskID
   \   000116   E0           MOVX    A,@DPTR
   \   000117   F9           MOV     R1,A
   \   000118   12....       LCALL   ??osal_start_timerEx?relay; Banked call to: osal_start_timerEx
    225              uint8 i,i2;
    226              uart_init();
   \   00011B                ; Setup parameters for call to function uart_init
   \   00011B   12....       LCALL   ??uart_init?relay    ; Banked call to: uart_init
    227              SendUART("\n\rAP-0001",9);  
   \   00011E                ; Setup parameters for call to function SendUART
   \   00011E   7909         MOV     R1,#0x9
   \   000120   7A..         MOV     R2,#`?<Constant "\\n\\rAP-0001">` & 0xff
   \   000122   7B..         MOV     R3,#(`?<Constant "\\n\\rAP-0001">` >> 8) & 0xff
   \   000124   12....       LCALL   ??SendUART?relay     ; Banked call to: SendUART
    228              for(i=0;i<20;i++)
   \   000127   75..00       MOV     ?V0,#0x0
    229              {
    230                if(DevListPW[i][0])
   \                     ??ParkWay_ProcessEvent_10:
   \   00012A   E5..         MOV     A,?V0
   \   00012C   75F006       MOV     B,#0x6
   \   00012F   A4           MUL     AB
   \   000130   F8           MOV     R0,A
   \   000131   A9F0         MOV     R1,B
   \   000133   74..         MOV     A,#DevListPW & 0xff
   \   000135   28           ADD     A,R0
   \   000136   F582         MOV     DPL,A
   \   000138   74..         MOV     A,#(DevListPW >> 8) & 0xff
   \   00013A   39           ADDC    A,R1
   \   00013B   F583         MOV     DPH,A
   \   00013D   E0           MOVX    A,@DPTR
   \   00013E   603F         JZ      ??ParkWay_ProcessEvent_11
    231                {
    232                  SendUART(",",1);  
   \   000140                ; Setup parameters for call to function SendUART
   \   000140   7901         MOV     R1,#0x1
   \   000142   7A..         MOV     R2,#`?<Constant ",">` & 0xff
   \   000144   7B..         MOV     R3,#(`?<Constant ",">` >> 8) & 0xff
   \   000146   12....       LCALL   ??SendUART?relay     ; Banked call to: SendUART
    233                  for(i2=0;i2<6;i2++)
   \   000149   75..00       MOV     ?V1,#0x0
   \                     ??ParkWay_ProcessEvent_12:
   \   00014C   85....       MOV     ?V2,?V1
   \   00014F   E5..         MOV     A,?V0
   \   000151   75F006       MOV     B,#0x6
   \   000154   A4           MUL     AB
   \   000155   F8           MOV     R0,A
   \   000156   A9F0         MOV     R1,B
   \   000158   74..         MOV     A,#DevListPW & 0xff
   \   00015A   28           ADD     A,R0
   \   00015B   F8           MOV     R0,A
   \   00015C   74..         MOV     A,#(DevListPW >> 8) & 0xff
   \   00015E   39           ADDC    A,R1
   \   00015F   F9           MOV     R1,A
   \   000160   E8           MOV     A,R0
   \   000161   25..         ADD     A,?V2
   \   000163   FE           MOV     R6,A
   \   000164   E4           CLR     A
   \   000165   39           ADDC    A,R1
   \   000166   FF           MOV     R7,A
   \   000167                ; Setup parameters for call to function SendUART
   \   000167   7901         MOV     R1,#0x1
   \   000169   EE           MOV     A,R6
   \   00016A   FA           MOV     R2,A
   \   00016B   EF           MOV     A,R7
   \   00016C   FB           MOV     R3,A
    234                  {
    235                    SendUART(&DevListPW[i][i2],1);  
   \   00016D   12....       LCALL   ??SendUART?relay     ; Banked call to: SendUART
    236                    DevListPW[i][i2] = 0;
   \   000170   8E82         MOV     DPL,R6
   \   000172   8F83         MOV     DPH,R7
   \   000174   E4           CLR     A
   \   000175   F0           MOVX    @DPTR,A
    237                  }
   \   000176   05..         INC     ?V1
   \   000178   E5..         MOV     A,?V1
   \   00017A   C3           CLR     C
   \   00017B   9406         SUBB    A,#0x6
   \   00017D   40CD         JC      ??ParkWay_ProcessEvent_12
    238                }
    239              } 
   \                     ??ParkWay_ProcessEvent_11:
   \   00017F   05..         INC     ?V0
   \   000181   E5..         MOV     A,?V0
   \   000183   C3           CLR     C
   \   000184   9414         SUBB    A,#0x14
   \   000186   40A2         JC      ??ParkWay_ProcessEvent_10
    240              SendUART("@OK",3);
   \   000188                ; Setup parameters for call to function SendUART
   \   000188   7903         MOV     R1,#0x3
   \   00018A   7A..         MOV     R2,#`?<Constant "@OK">` & 0xff
   \   00018C   7B..         MOV     R3,#(`?<Constant "@OK">` >> 8) & 0xff
   \   00018E   12....       LCALL   ??SendUART?relay     ; Banked call to: SendUART
    241            }  
    242           
    243            return 0;
   \                     ??ParkWay_ProcessEvent_9:
   \   000191   7A00         MOV     R2,#0x0
   \   000193   7B00         MOV     R3,#0x0
   \                     ??ParkWay_ProcessEvent_8:
   \   000195   7F05         MOV     R7,#0x5
   \   000197   02....       LJMP    ?BANKED_LEAVE_XDATA
    244          }
    245          
    246          
    247          //This function process the ZDO events to bind
    248          static void ParkWay_ProcessZDOMsgs( zdoIncomingMsg_t *inMsg )
    249          {
    250            switch ( inMsg->clusterID )
    251            {
    252              case End_Device_Bind_rsp:
    253                if ( ZDO_ParseBindRsp( inMsg ) == ZSuccess )
    254                {
    255                  // Light LED
    256                  //HalLedSet( HAL_LED_1, HAL_LED_MODE_ON );
    257                }
    258          #if defined( BLINK_LEDS )
    259                else
    260                {
    261                  // Flash LED to show failure
    262                  //HalLedSet ( HAL_LED_1, HAL_LED_MODE_FLASH );
    263                }
    264          #endif
    265                break;
    266          
    267              case Match_Desc_rsp:
    268                {
    269                  ZDO_ActiveEndpointRsp_t *pRsp = ZDO_ParseEPListRsp( inMsg );
    270                  if ( pRsp )
    271                  {
    272                    if ( pRsp->status == ZSuccess && pRsp->cnt )
    273                    {
    274                      ParkWay_DstAddr.addrMode = (afAddrMode_t)Addr16Bit;
    275                      ParkWay_DstAddr.addr.shortAddr = pRsp->nwkAddr;
    276                      // Take the first endpoint, Can be changed to search through endpoints
    277                      ParkWay_DstAddr.endPoint = pRsp->epList[0];
    278          
    279                      // Light LED
    280                      //HalLedSet( HAL_LED_1, HAL_LED_MODE_ON );
    281                    }
    282                    osal_mem_free( pRsp );
    283                  }
    284                }
    285                break;
    286            }
    287          }
    288          
    289          //This function process the frames received by the application framework (source routers and end devices)
    290          static void ParkWay_MessageMSGCB( afIncomingMSGPacket_t *pkt_1 )
    291          {
    292            uint8* pkt;
    293            //teste=pkt_1->srcAddr;   //Used to collect que NETWORK ADDRESS of the device connected to the coordinator
    294            pkt=(pkt_1->cmd.Data);    //Pointer to the data of packet
    295            
    296            uint8 i,dev=(((*(pkt+2)-48)*10)+(*(pkt+3)-48));
    297            
    298            for(i=0;i<6;i++)
    299            {
    300              DevListPW[dev][i]=*(pkt+i);
    301            } 
    302          }
    303          
    304          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    305          static void UART_CallBack(uint8 port, uint8 event)
   \                     UART_CallBack:
    306          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 1
   \   000005   74FF         MOV     A,#-0x1
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   EA           MOV     A,R2
   \   00000B   FF           MOV     R7,A
    307            (void)port;
    308            //uint8 pData[1];
    309            uint8 cmdbuff[1];
    310          
    311            if (event & (HAL_UART_RX_FULL | HAL_UART_RX_ABOUT_FULL | HAL_UART_RX_TIMEOUT))
   \   00000C   7407         MOV     A,#0x7
   \   00000E   5F           ANL     A,R7
   \   00000F   600B         JZ      ??UART_CallBack_0
    312            {
    313              HalUARTRead(port, cmdbuff, 1);
   \   000011                ; Setup parameters for call to function HalUARTRead
   \   000011   7C01         MOV     R4,#0x1
   \   000013   7D00         MOV     R5,#0x0
   \   000015   AA..         MOV     R2,?XSP + 0
   \   000017   AB..         MOV     R3,?XSP + 1
   \   000019   12....       LCALL   ??HalUARTRead?relay  ; Banked call to: HalUARTRead
    314              /************************************************* This was used to send some specific data do the last device connected to the COORDINATOR (HDA)**************************************/
    315              // if(*cmdbuff==48)
    316              // {
    317              //   SendUART("  Desligar",10);
    318              //   pData[0] = '0';
    319              //   AF_DataRequest( &teste, &ParkWay_epDesc,
    320              //                    ParkWay_CLUSTERID,
    321              //                    (byte)osal_strlen( pData ) + 1,
    322              //                    (byte *)&pData,
    323              //                    &ParkWay_TransID,
    324              //                    AF_DISCV_ROUTE, AF_DEFAULT_RADIUS ); 
    325              // }
    326              // else
    327              // {
    328              //   SendUART("  Ligar",7);
    329              //   pData[0] = '1';
    330              //   AF_DataRequest( &teste, &ParkWay_epDesc,
    331              //                    ParkWay_CLUSTERID,
    332              //                    (byte)osal_strlen( pData ) + 1,
    333              //                    (byte *)&pData,
    334              //                    &ParkWay_TransID,
    335              //                    AF_DISCV_ROUTE, AF_DEFAULT_RADIUS ); 
    336              // }
    337              // SendUART(cmdbuff,1);
    338              /*********************************************** This was used to send some specific data do the last device connected to the COORDINATOR (HDA)**************************************/
    339            }
    340          }
   \                     ??UART_CallBack_0:
   \   00001C   7401         MOV     A,#0x1
   \   00001E   12....       LCALL   ?DEALLOC_XSTACK8
   \   000021   02....       LJMP    ?Subroutine0 & 0xFFFF
    341          
    342          //This function initializes the UART

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    343          void uart_init()
   \                     uart_init:
    344          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 29
   \   000004   74E3         MOV     A,#-0x1d
   \   000006   12....       LCALL   ?ALLOC_XSTACK8
    345            halUARTCfg_t uartConfig;
    346            uartConfig.configured = TRUE; // 2x30 don't care - see uart driver.
   \   000009   85..82       MOV     DPL,?XSP + 0
   \   00000C   85..83       MOV     DPH,?XSP + 1
   \   00000F   7401         MOV     A,#0x1
   \   000011   F0           MOVX    @DPTR,A
    347            uartConfig.baudRate = HAL_UART_BR_9600;
   \   000012   12....       LCALL   ?XSTACK_DISP0_8
   \   000015   E4           CLR     A
   \   000016   F0           MOVX    @DPTR,A
    348            uartConfig.flowControl = TRUE;
   \   000017   7402         MOV     A,#0x2
   \   000019   12....       LCALL   ?XSTACK_DISP0_8
   \   00001C   7401         MOV     A,#0x1
   \   00001E   F0           MOVX    @DPTR,A
    349            uartConfig.flowControlThreshold = 48; // 2x30 don't care - see uart driver.
   \   00001F   7403         MOV     A,#0x3
   \   000021   12....       LCALL   ?XSTACK_DISP0_8
   \   000024   7430         MOV     A,#0x30
   \   000026   F0           MOVX    @DPTR,A
   \   000027   A3           INC     DPTR
   \   000028   E4           CLR     A
   \   000029   F0           MOVX    @DPTR,A
    350            uartConfig.rx.maxBufSize = 128; // 2x30 don't care - see uart driver.
   \   00002A   740A         MOV     A,#0xa
   \   00002C   12....       LCALL   ?XSTACK_DISP0_8
   \   00002F   7480         MOV     A,#-0x80
   \   000031   F0           MOVX    @DPTR,A
   \   000032   A3           INC     DPTR
   \   000033   E4           CLR     A
   \   000034   F0           MOVX    @DPTR,A
    351            uartConfig.tx.maxBufSize = 128; // 2x30 don't care - see uart driver.
   \   000035   7412         MOV     A,#0x12
   \   000037   12....       LCALL   ?XSTACK_DISP0_8
   \   00003A   7480         MOV     A,#-0x80
   \   00003C   F0           MOVX    @DPTR,A
   \   00003D   A3           INC     DPTR
   \   00003E   E4           CLR     A
   \   00003F   F0           MOVX    @DPTR,A
    352            uartConfig.idleTimeout = 6; // 2x30 don't care - see uart driver.
   \   000040   7405         MOV     A,#0x5
   \   000042   12....       LCALL   ?XSTACK_DISP0_8
   \   000045   7406         MOV     A,#0x6
   \   000047   F0           MOVX    @DPTR,A
    353            uartConfig.intEnable = TRUE; // 2x30 don't care - see uart driver.
   \   000048   7416         MOV     A,#0x16
   \   00004A   12....       LCALL   ?XSTACK_DISP0_8
   \   00004D   7401         MOV     A,#0x1
   \   00004F   F0           MOVX    @DPTR,A
    354            uartConfig.callBackFunc = UART_CallBack;
   \   000050   741B         MOV     A,#0x1b
   \   000052   12....       LCALL   ?XSTACK_DISP0_8
   \   000055   74..         MOV     A,#??UART_CallBack?relay & 0xff
   \   000057   F0           MOVX    @DPTR,A
   \   000058   A3           INC     DPTR
   \   000059   74..         MOV     A,#(??UART_CallBack?relay >> 8) & 0xff
   \   00005B   F0           MOVX    @DPTR,A
    355            HalUARTOpen (HAL_UART_PORT_0, &uartConfig);
   \   00005C                ; Setup parameters for call to function HalUARTOpen
   \   00005C   AA..         MOV     R2,?XSP + 0
   \   00005E   AB..         MOV     R3,?XSP + 1
   \   000060   7900         MOV     R1,#0x0
   \   000062   12....       LCALL   ??HalUARTOpen?relay  ; Banked call to: HalUARTOpen
    356          }
   \   000065   741D         MOV     A,#0x1d
   \   000067   12....       LCALL   ?DEALLOC_XSTACK8
   \   00006A   D083         POP     DPH
   \   00006C   D082         POP     DPL
   \   00006E   02....       LJMP    ?BRET
    357          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    358          void SendUART(uint8 *data,uint8 len)
   \                     SendUART:
    359          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   \   000005   E9           MOV     A,R1
    360            HalUARTWrite(HAL_UART_PORT_0, data, len);
   \   000006                ; Setup parameters for call to function HalUARTWrite
   \   000006   FC           MOV     R4,A
   \   000007   7D00         MOV     R5,#0x0
   \   000009   7900         MOV     R1,#0x0
   \   00000B   12....       LCALL   ??HalUARTWrite?relay ; Banked call to: HalUARTWrite
    361          }
   \   00000E   7F02         MOV     R7,#0x2
   \   000010   02....       LJMP    ?BANKED_LEAVE_XDATA

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ParkWay_Init?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ParkWay_Init

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ParkWay_ProcessEvent?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ParkWay_ProcessEvent

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??UART_CallBack?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    UART_CallBack

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??uart_init?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    uart_init

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??SendUART?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    SendUART

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "\\n\\rAP-0001">`:
   \   000000   0A0D4150     DB "\012\015AP-0001"
   \            2D303030
   \            3100    

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant ",">`:
   \   000000   2C00         DB ","

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "@OK">`:
   \   000000   404F4B00     DB "@OK"
    362          
    363          
    364          /*********************************************************************/

   Maximum stack usage in bytes:

   ISTACK XSTACK Function
   ------ ------ --------
      0      9   ParkWay_Init
        0      9   -> RegisterForKeys
        0      9   -> ZDO_RegisterForZDOMsg
        0      9   -> afRegister
        0      9   -> osal_start_timerEx
      1     13   ParkWay_ProcessEvent
        0     13   -> SendUART
        0     13   -> ZDO_ParseEPListRsp
        0     13   -> osal_mem_free
        0     13   -> osal_msg_deallocate
        0     13   -> osal_msg_receive
        0     13   -> osal_start_timerEx
        0     13   -> uart_init
      0     23   SendUART
        0     10   -> HalUARTWrite
      0     10   UART_CallBack
        0     10   -> HalUARTRead
      2     42   uart_init
        2     29   -> HalUARTOpen


   Segment part sizes:

   Bytes  Function/Label
   -----  --------------
       2  ?<Constant ",">
       4  ?<Constant "@OK">
      10  ?<Constant "\n\rAP-0001">
       6  ??ParkWay_Init?relay
       6  ??ParkWay_ProcessEvent?relay
       6  ??SendUART?relay
       6  ??UART_CallBack?relay
       6  ??uart_init?relay
       5  ?Subroutine0
     120  DevListPW
       2  ParkWay_ClusterList
      12  ParkWay_DstAddr
     113  ParkWay_Init
       1  ParkWay_NwkState
     410  ParkWay_ProcessEvent
      12  ParkWay_SimpleDesc
       1  ParkWay_TaskID
       1  ParkWay_TransID
       6  ParkWay_epDesc
      19  SendUART
      36  UART_CallBack
     113  uart_init

 
 696 bytes in segment BANKED_CODE
  30 bytes in segment BANK_RELAYS
  30 bytes in segment XDATA_ROM_C
 141 bytes in segment XDATA_Z
 
 726 bytes of CODE  memory
  30 bytes of CONST memory
 141 bytes of XDATA memory

Errors: none
Warnings: none
