///////////////////////////////////////////////////////////////////////////////
//                                                                            /
// IAR C/C++ Compiler V8.30.1.41636 for 8051            31/Jul/2014  18:31:38 /
// Copyright 2004-2013 IAR Systems AB.                                        /
//                                                                            /
//    Core               =  plain                                             /
//    Code model         =  banked                                            /
//    Data model         =  large                                             /
//    Calling convention =  xdata reentrant                                   /
//    Constant location  =  data_rom                                          /
//    Dptr setup         =  1,16                                              /
//                                                                            /
//    Source file        =  C:\Texas Instruments\ZStack-CC2530-2.5.1a\Project /
//                          s\zstack\Samples\ParkWay\Source\PW_Coordinator.c  /
//    Command line       =  -f "C:\Texas Instruments\ZStack-CC2530-2.5.1a\Pro /
//                          jects\zstack\Samples\ParkWay\CC2530DB\..\..\..\To /
//                          ols\CC2530DB\f8wCoord.cfg" (-DCPU32MHZ            /
//                          -DROOT=__near_func -DMAC_CFG_APP_PENDING_QUEUE=TR /
//                          UE -DMAC_CFG_TX_DATA_MAX=5 -DMAC_CFG_TX_MAX=8     /
//                          -DMAC_CFG_RX_MAX=5 -DZDO_COORDINATOR -DRTR_NWK)   /
//                          -f "C:\Texas Instruments\ZStack-CC2530-2.5.1a\Pro /
//                          jects\zstack\Samples\ParkWay\CC2530DB\..\..\..\To /
//                          ols\CC2530DB\f8wConfig.cfg" (-DZIGBEEPRO          /
//                          -DSECURE=0 -DZG_SECURE_DYNAMIC=0 -DREFLECTOR      /
//                          -DDEFAULT_CHANLIST=0x00000800                     /
//                          -DZDAPP_CONFIG_PAN_ID=0xFFFF                      /
//                          -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_M /
//                          ASK=0x007F -DBEACON_REQUEST_DELAY=100             /
//                          -DBEACON_REQ_DELAY_MASK=0x00FF                    /
//                          -DLINK_STATUS_JITTER_MASK=0x007F                  /
//                          -DROUTE_EXPIRY_TIME=30 -DAPSC_ACK_WAIT_DURATION_P /
//                          OLLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7           /
//                          -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3   /
//                          -DNWK_MAX_DATA_RETRIES=2                          /
//                          -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9        /
//                          -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40          /
//                          -DNWK_MAX_BINDING_ENTRIES=4                       /
//                          -DMAX_BINDING_CLUSTER_IDS=4                       /
//                          "-DDEFAULT_KEY={0x01, 0x03, 0x05, 0x07, 0x09,     /
//                          0x0B, 0x0D, 0x0F, 0x00, 0x02, 0x04, 0x06, 0x08,   /
//                          0x0A, 0x0C, 0x0D}" -DMAC_MAX_FRAME_SIZE=116       /
//                          -DZDNWKMGR_MIN_TRANSMISSIONS=20 "-DCONST=const    /
//                          __code" -DGENERIC=__generic                       /
//                          -DRFD_RCVC_ALWAYS_ON=FALSE -DPOLL_RATE=1000       /
//                          -DQUEUED_POLL_RATE=100 -DRESPONSE_POLL_RATE=100)  /
//                          -DREJOIN_POLL_RATE=440 "C:\Texas                  /
//                          Instruments\ZStack-CC2530-2.5.1a\Projects\zstack\ /
//                          Samples\ParkWay\Source\PW_Coordinator.c" -D       /
//                          ZTOOL_P1 -D MT_TASK -D MT_SYS_FUNC -D             /
//                          MT_ZDO_FUNC -D xLCD_SUPPORTED -D NV_RESTORE -lC   /
//                          "C:\Texas Instruments\ZStack-CC2530-2.5.1a\Projec /
//                          ts\zstack\Samples\ParkWay\CC2530DB\CoordinatorEB\ /
//                          List\" -lA "C:\Texas Instruments\ZStack-CC2530-2. /
//                          5.1a\Projects\zstack\Samples\ParkWay\CC2530DB\Coo /
//                          rdinatorEB\List\" --diag_suppress Pe001,Pa010 -o  /
//                          "C:\Texas Instruments\ZStack-CC2530-2.5.1a\Projec /
//                          ts\zstack\Samples\ParkWay\CC2530DB\CoordinatorEB\ /
//                          Obj\" -e --no_code_motion --debug --core=plain    /
//                          --dptr=16,1 --data_model=large                    /
//                          --code_model=banked --calling_convention=xdata_re /
//                          entrant --place_constants=data_rom                /
//                          --nr_virtual_regs 8 -I "C:\Texas                  /
//                          Instruments\ZStack-CC2530-2.5.1a\Projects\zstack\ /
//                          Samples\ParkWay\CC2530DB\" -I "C:\Texas           /
//                          Instruments\ZStack-CC2530-2.5.1a\Projects\zstack\ /
//                          Samples\ParkWay\CC2530DB\..\Source\" -I           /
//                          "C:\Texas Instruments\ZStack-CC2530-2.5.1a\Projec /
//                          ts\zstack\Samples\ParkWay\CC2530DB\..\..\..\ZMain /
//                          \TI2530DB\" -I "C:\Texas                          /
//                          Instruments\ZStack-CC2530-2.5.1a\Projects\zstack\ /
//                          Samples\ParkWay\CC2530DB\..\..\..\..\..\Component /
//                          s\hal\include\" -I "C:\Texas                      /
//                          Instruments\ZStack-CC2530-2.5.1a\Projects\zstack\ /
//                          Samples\ParkWay\CC2530DB\..\..\..\..\..\Component /
//                          s\hal\target\CC2530EB\" -I "C:\Texas              /
//                          Instruments\ZStack-CC2530-2.5.1a\Projects\zstack\ /
//                          Samples\ParkWay\CC2530DB\..\..\..\..\..\Component /
//                          s\mac\include\" -I "C:\Texas                      /
//                          Instruments\ZStack-CC2530-2.5.1a\Projects\zstack\ /
//                          Samples\ParkWay\CC2530DB\..\..\..\..\..\Component /
//                          s\mac\high_level\" -I "C:\Texas                   /
//                          Instruments\ZStack-CC2530-2.5.1a\Projects\zstack\ /
//                          Samples\ParkWay\CC2530DB\..\..\..\..\..\Component /
//                          s\mac\low_level\srf04\" -I "C:\Texas              /
//                          Instruments\ZStack-CC2530-2.5.1a\Projects\zstack\ /
//                          Samples\ParkWay\CC2530DB\..\..\..\..\..\Component /
//                          s\mac\low_level\srf04\single_chip\" -I "C:\Texas  /
//                          Instruments\ZStack-CC2530-2.5.1a\Projects\zstack\ /
//                          Samples\ParkWay\CC2530DB\..\..\..\..\..\Component /
//                          s\mt\" -I "C:\Texas Instruments\ZStack-CC2530-2.5 /
//                          .1a\Projects\zstack\Samples\ParkWay\CC2530DB\..\. /
//                          .\..\..\..\Components\osal\include\" -I           /
//                          "C:\Texas Instruments\ZStack-CC2530-2.5.1a\Projec /
//                          ts\zstack\Samples\ParkWay\CC2530DB\..\..\..\..\.. /
//                          \Components\services\saddr\" -I "C:\Texas         /
//                          Instruments\ZStack-CC2530-2.5.1a\Projects\zstack\ /
//                          Samples\ParkWay\CC2530DB\..\..\..\..\..\Component /
//                          s\services\sdata\" -I "C:\Texas                   /
//                          Instruments\ZStack-CC2530-2.5.1a\Projects\zstack\ /
//                          Samples\ParkWay\CC2530DB\..\..\..\..\..\Component /
//                          s\stack\af\" -I "C:\Texas                         /
//                          Instruments\ZStack-CC2530-2.5.1a\Projects\zstack\ /
//                          Samples\ParkWay\CC2530DB\..\..\..\..\..\Component /
//                          s\stack\nwk\" -I "C:\Texas                        /
//                          Instruments\ZStack-CC2530-2.5.1a\Projects\zstack\ /
//                          Samples\ParkWay\CC2530DB\..\..\..\..\..\Component /
//                          s\stack\sapi\" -I "C:\Texas                       /
//                          Instruments\ZStack-CC2530-2.5.1a\Projects\zstack\ /
//                          Samples\ParkWay\CC2530DB\..\..\..\..\..\Component /
//                          s\stack\sec\" -I "C:\Texas                        /
//                          Instruments\ZStack-CC2530-2.5.1a\Projects\zstack\ /
//                          Samples\ParkWay\CC2530DB\..\..\..\..\..\Component /
//                          s\stack\sys\" -I "C:\Texas                        /
//                          Instruments\ZStack-CC2530-2.5.1a\Projects\zstack\ /
//                          Samples\ParkWay\CC2530DB\..\..\..\..\..\Component /
//                          s\stack\zdo\" -I "C:\Texas                        /
//                          Instruments\ZStack-CC2530-2.5.1a\Projects\zstack\ /
//                          Samples\ParkWay\CC2530DB\..\..\..\..\..\Component /
//                          s\zmac\" -I "C:\Texas Instruments\ZStack-CC2530-2 /
//                          .5.1a\Projects\zstack\Samples\ParkWay\CC2530DB\.. /
//                          \..\..\..\..\Components\zmac\f8w\" -Ohz           /
//                          --require_prototypes                              /
//    List file          =  C:\Texas Instruments\ZStack-CC2530-2.5.1a\Project /
//                          s\zstack\Samples\ParkWay\CC2530DB\CoordinatorEB\L /
//                          ist\PW_Coordinator.s51                            /
//                                                                            /
//                                                                            /
///////////////////////////////////////////////////////////////////////////////

        NAME PW_Coordinator

        RTMODEL "__SystemLibrary", "CLib"
        RTMODEL "__calling_convention", "xdata_reentrant"
        RTMODEL "__code_model", "banked"
        RTMODEL "__core", "plain"
        RTMODEL "__data_model", "large"
        RTMODEL "__dptr_size", "16"
        RTMODEL "__extended_stack", "disabled"
        RTMODEL "__location_for_constants", "data"
        RTMODEL "__number_of_dptrs", "1"
        RTMODEL "__rt_version", "1"

        RSEG DOVERLAY:DATA:NOROOT(0)
        RSEG IOVERLAY:IDATA:NOROOT(0)
        RSEG ISTACK:IDATA:NOROOT(0)
        RSEG PSTACK:XDATA:NOROOT(0)
        RSEG XSTACK:XDATA:NOROOT(0)

        EXTERN ?V0
        EXTERN ?V1
        EXTERN ?V2
        EXTERN ?V3
        EXTERN ?V4
        EXTERN ?ALLOC_XSTACK8
        EXTERN ?BANKED_ENTER_XDATA
        EXTERN ?BANKED_LEAVE_XDATA
        EXTERN ?BDISPATCH
        EXTERN ?BRET
        EXTERN ?DEALLOC_XSTACK8
        EXTERN ?XSP
        EXTERN ?XSTACK_DISP0_8
        EXTERN __INIT_XDATA_Z

        PUBLIC ??ParkWay_Init?relay
        FUNCTION ??ParkWay_Init?relay,0203H
        PUBLIC ??ParkWay_ProcessEvent?relay
        FUNCTION ??ParkWay_ProcessEvent?relay,0203H
        PUBLIC ??SendUART?relay
        FUNCTION ??SendUART?relay,0203H
        FUNCTION ??UART_CallBack?relay,0203H
        PUBLIC ??uart_init?relay
        FUNCTION ??uart_init?relay,0203H
        PUBLIC ParkWay_ClusterList
        PUBLIC ParkWay_DstAddr
        PUBLIC ParkWay_Init
        FUNCTION ParkWay_Init,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        PUBLIC ParkWay_NwkState
        PUBLIC ParkWay_ProcessEvent
        FUNCTION ParkWay_ProcessEvent,0a1203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 13, STACK
        PUBLIC ParkWay_SimpleDesc
        PUBLIC ParkWay_TaskID
        PUBLIC ParkWay_TransID
        PUBLIC ParkWay_epDesc
        PUBLIC SendUART
        FUNCTION SendUART,0a1203H
        ARGFRAME XSTACK, 13, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 10, STACK
        FUNCTION UART_CallBack,021603H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        PUBLIC uart_init
        FUNCTION uart_init,021203H
        ARGFRAME XSTACK, 13, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME XSTACK, 29, STACK
        
          CFI Names cfiNames0
          CFI StackFrame CFA_SP SP IDATA
          CFI StackFrame CFA_PSP16 PSP16 XDATA
          CFI StackFrame CFA_XSP16 XSP16 XDATA
          CFI StaticOverlayFrame CFA_IOVERLAY IOVERLAY
          CFI StaticOverlayFrame CFA_DOVERLAY DOVERLAY
          CFI Resource `PSW.CY`:1, `B.BR0`:1, `B.BR1`:1, `B.BR2`:1, `B.BR3`:1
          CFI Resource `B.BR4`:1, `B.BR5`:1, `B.BR6`:1, `B.BR7`:1, `VB.BR8`:1
          CFI Resource `VB.BR9`:1, `VB.BR10`:1, `VB.BR11`:1, `VB.BR12`:1
          CFI Resource `VB.BR13`:1, `VB.BR14`:1, `VB.BR15`:1, VB:8, B:8, A:8
          CFI Resource PSW:8, DPL0:8, DPH0:8, R0:8, R1:8, R2:8, R3:8, R4:8, R5:8
          CFI Resource R6:8, R7:8, V0:8, V1:8, V2:8, V3:8, V4:8, V5:8, V6:8, V7:8
          CFI Resource SP:8, PSPH:8, PSPL:8, PSP16:16, XSPH:8, XSPL:8, XSP16:16
          CFI VirtualResource ?RET:24
          CFI Resource ?BRET_EXT:8
          CFI VirtualResource ?RET_HIGH:8, ?RET_LOW:8
          CFI ResourceParts PSP16 PSPH, PSPL
          CFI ResourceParts XSP16 XSPH, XSPL
          CFI ResourceParts ?RET ?BRET_EXT, ?RET_HIGH, ?RET_LOW
          CFI EndNames cfiNames0
        
          CFI Common cfiCommon0 Using cfiNames0
          CFI CodeAlign 1
          CFI DataAlign -1
          CFI ReturnAddress ?RET CODE
          CFI CFA_DOVERLAY Used
          CFI CFA_IOVERLAY Used
          CFI CFA_SP SP+-3
          CFI CFA_PSP16 PSP16+0
          CFI CFA_XSP16 XSP16+0
          CFI `PSW.CY` SameValue
          CFI `B.BR0` SameValue
          CFI `B.BR1` SameValue
          CFI `B.BR2` SameValue
          CFI `B.BR3` SameValue
          CFI `B.BR4` SameValue
          CFI `B.BR5` SameValue
          CFI `B.BR6` SameValue
          CFI `B.BR7` SameValue
          CFI `VB.BR8` SameValue
          CFI `VB.BR9` SameValue
          CFI `VB.BR10` SameValue
          CFI `VB.BR11` SameValue
          CFI `VB.BR12` SameValue
          CFI `VB.BR13` SameValue
          CFI `VB.BR14` SameValue
          CFI `VB.BR15` SameValue
          CFI VB SameValue
          CFI B Undefined
          CFI A Undefined
          CFI PSW SameValue
          CFI DPL0 SameValue
          CFI DPH0 SameValue
          CFI R0 Undefined
          CFI R1 Undefined
          CFI R2 Undefined
          CFI R3 Undefined
          CFI R4 Undefined
          CFI R5 Undefined
          CFI R6 SameValue
          CFI R7 SameValue
          CFI V0 SameValue
          CFI V1 SameValue
          CFI V2 SameValue
          CFI V3 SameValue
          CFI V4 SameValue
          CFI V5 SameValue
          CFI V6 SameValue
          CFI V7 SameValue
          CFI PSPH Undefined
          CFI PSPL Undefined
          CFI XSPH Undefined
          CFI XSPL Undefined
          CFI ?RET Concat
          CFI ?BRET_EXT Frame(CFA_SP, 3)
          CFI ?RET_HIGH Frame(CFA_SP, 2)
          CFI ?RET_LOW Frame(CFA_SP, 1)
          CFI EndCommon cfiCommon0
        
HalUARTOpen         SYMBOL "HalUARTOpen"
??HalUARTOpen?relay SYMBOL "?relay", HalUARTOpen
HalUARTRead         SYMBOL "HalUARTRead"
??HalUARTRead?relay SYMBOL "?relay", HalUARTRead
HalUARTWrite        SYMBOL "HalUARTWrite"
??HalUARTWrite?relay SYMBOL "?relay", HalUARTWrite
RegisterForKeys     SYMBOL "RegisterForKeys"
??RegisterForKeys?relay SYMBOL "?relay", RegisterForKeys
ZDO_ParseEPListRsp  SYMBOL "ZDO_ParseEPListRsp"
??ZDO_ParseEPListRsp?relay SYMBOL "?relay", ZDO_ParseEPListRsp
ZDO_RegisterForZDOMsg SYMBOL "ZDO_RegisterForZDOMsg"
??ZDO_RegisterForZDOMsg?relay SYMBOL "?relay", ZDO_RegisterForZDOMsg
afRegister          SYMBOL "afRegister"
??afRegister?relay  SYMBOL "?relay", afRegister
osal_mem_free       SYMBOL "osal_mem_free"
??osal_mem_free?relay SYMBOL "?relay", osal_mem_free
osal_msg_deallocate SYMBOL "osal_msg_deallocate"
??osal_msg_deallocate?relay SYMBOL "?relay", osal_msg_deallocate
osal_msg_receive    SYMBOL "osal_msg_receive"
??osal_msg_receive?relay SYMBOL "?relay", osal_msg_receive
osal_start_timerEx  SYMBOL "osal_start_timerEx"
??osal_start_timerEx?relay SYMBOL "?relay", osal_start_timerEx
ParkWay_Init        SYMBOL "ParkWay_Init"
??ParkWay_Init?relay SYMBOL "?relay", ParkWay_Init
ParkWay_ProcessEvent SYMBOL "ParkWay_ProcessEvent"
??ParkWay_ProcessEvent?relay SYMBOL "?relay", ParkWay_ProcessEvent
SendUART            SYMBOL "SendUART"
??SendUART?relay    SYMBOL "?relay", SendUART
uart_init           SYMBOL "uart_init"
??uart_init?relay   SYMBOL "?relay", uart_init

        EXTERN ??HalUARTOpen?relay
        FUNCTION ??HalUARTOpen?relay,00H
        EXTERN ??HalUARTRead?relay
        FUNCTION ??HalUARTRead?relay,00H
        EXTERN ??HalUARTWrite?relay
        FUNCTION ??HalUARTWrite?relay,00H
        EXTERN ??RegisterForKeys?relay
        FUNCTION ??RegisterForKeys?relay,00H
        EXTERN ??ZDO_ParseEPListRsp?relay
        FUNCTION ??ZDO_ParseEPListRsp?relay,00H
        EXTERN ??ZDO_RegisterForZDOMsg?relay
        FUNCTION ??ZDO_RegisterForZDOMsg?relay,00H
        EXTERN ??afRegister?relay
        FUNCTION ??afRegister?relay,00H
        EXTERN ??osal_mem_free?relay
        FUNCTION ??osal_mem_free?relay,00H
        EXTERN ??osal_msg_deallocate?relay
        FUNCTION ??osal_msg_deallocate?relay,00H
        EXTERN ??osal_msg_receive?relay
        FUNCTION ??osal_msg_receive?relay,00H
        EXTERN ??osal_start_timerEx?relay
        FUNCTION ??osal_start_timerEx?relay,00H
        EXTERN HalUARTOpen
        FUNCTION HalUARTOpen,0202H
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 29, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN HalUARTRead
        FUNCTION HalUARTRead,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN HalUARTWrite
        FUNCTION HalUARTWrite,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN RegisterForKeys
        FUNCTION RegisterForKeys,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN ZDO_ParseEPListRsp
        FUNCTION ZDO_ParseEPListRsp,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 13, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN ZDO_RegisterForZDOMsg
        FUNCTION ZDO_RegisterForZDOMsg,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN afRegister
        FUNCTION afRegister,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_mem_free
        FUNCTION osal_mem_free,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 13, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_msg_deallocate
        FUNCTION osal_msg_deallocate,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 13, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_msg_receive
        FUNCTION osal_msg_receive,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 13, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_start_timerEx
        FUNCTION osal_start_timerEx,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 13, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC

// C:\Texas Instruments\ZStack-CC2530-2.5.1a\Projects\zstack\Samples\ParkWay\Source\PW_Coordinator.c
//    1 /*****************************************************************************
//    2   Project: Park Way (ZigBee)
//    3   Coordinator Firmware
//    4 
//    5   Ver.: 1.0
//    6   Date: 27/06/14
//    7   Developer:  Ânderson Ignácio da Silva
//    8   Obs.:
//    9     -LCD_SUPPORTED=DEBUG or LCD_SUPPORTED must be disable in the CC2530 China 
//   10     modules to work
//   11     
//   12     -BEFORE PROGRAMMING is important to ERASE the FLASH memory with the FLASH
//   13     programmer because the NV_RESTORE option is enabled  to restore the  End 
//   14     Devices after the coordinator power down
//   15 
//   16     -When the board has PA_LNA RANGE EXTENDER, it must be necessary to cut off
//   17     the 'x' from the defines of #define xHAL_PA_LNA of the hal_board_cfg.h
//   18 
//   19   Pre-processor directives:
//   20     ZTOOL_P1
//   21     MT_TASK
//   22     MT_SYS_FUNC
//   23     MT_ZDO_FUNC
//   24     xLCD_SUPPORTED
//   25     NV_RESTORE
//   26 
//   27 *****************************************************************************/
//   28 
//   29 
//   30 /*********************************************************************
//   31  * INCLUDES
//   32  */
//   33 #include "OSAL.h"
//   34 #include "AF.h"
//   35 #include "ZDApp.h"
//   36 #include "ZDObject.h"
//   37 #include "ZDProfile.h"
//   38 #include "ParkWay.h"
//   39 #include "DebugTrace.h"
//   40 #include "OnBoard.h"
//   41 /* HAL */
//   42 #include "hal_lcd.h"
//   43 #include "hal_led.h"
//   44 #include "hal_key.h"
//   45 #include "hal_uart.h"
//   46  
//   47 
//   48 /*********************************************************************
//   49  * MACROS
//   50  */
//   51 
//   52 /*********************************************************************
//   53  * CONSTANTS
//   54  */
//   55 #define   TIME_PARKWAY_POLL   2000    //Control the time of polling of the read devices
//   56 /*********************************************************************
//   57  * TYPEDEFS
//   58  */
//   59 
//   60 /*********************************************************************
//   61  * GLOBAL VARIABLES
//   62  */
//   63 //afAddrType_t           teste;   //This store the address of the last peer connected to the coordinator
//   64 
//   65 // This list should be filled with Application specific Cluster IDs.

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA16
//   66 const cId_t ParkWay_ClusterList[ParkWay_MAX_CLUSTERS] =
ParkWay_ClusterList:
        DW 1
//   67 {
//   68   ParkWay_CLUSTERID
//   69 };
//   70 

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
//   71 const SimpleDescriptionFormat_t ParkWay_SimpleDesc =
ParkWay_SimpleDesc:
        DB 10
        DATA16
        DW 3844
        DW 1
        DATA8
        DB 0
        DB 1
        DATA16
        DW ParkWay_ClusterList
        DATA8
        DB 1
        DATA16
        DW ParkWay_ClusterList
//   72 {
//   73   ParkWay_ENDPOINT,              //  int Endpoint;
//   74   ParkWay_PROFID,                //  uint16 AppProfId[2];
//   75   ParkWay_DEVICEID,              //  uint16 AppDeviceId[2];
//   76   ParkWay_DEVICE_VERSION,        //  int   AppDevVer:4;
//   77   ParkWay_FLAGS,                 //  int   AppFlags:4;
//   78   ParkWay_MAX_CLUSTERS,          //  byte  AppNumInClusters;
//   79   (cId_t *)ParkWay_ClusterList,  //  byte *pAppInClusterList;
//   80   ParkWay_MAX_CLUSTERS,          //  byte  AppNumInClusters;
//   81   (cId_t *)ParkWay_ClusterList   //  byte *pAppInClusterList;
//   82 };
//   83 
//   84 // This is the Endpoint/Interface description.  It is defined here, but
//   85 // filled-in in ParkWay_Init().  Another way to go would be to fill
//   86 // in the structure here and make it a "const" (in code space).  The
//   87 // way it's defined in this sample app it is define in RAM.

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//   88 endPointDesc_t ParkWay_epDesc;
ParkWay_epDesc:
        DS 6
        REQUIRE __INIT_XDATA_Z
//   89 
//   90 /*********************************************************************
//   91  * EXTERNAL VARIABLES
//   92  */
//   93 
//   94 /*********************************************************************
//   95  * EXTERNAL FUNCTIONS
//   96  */
//   97 
//   98 /*********************************************************************
//   99  * LOCAL VARIABLES
//  100  */

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  101 byte ParkWay_TaskID;   // Task ID for internal task/event processing
ParkWay_TaskID:
        DS 1
        REQUIRE __INIT_XDATA_Z
//  102                           // This variable will be received when
//  103                           // ParkWay_Init() is called.

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  104 devStates_t ParkWay_NwkState;
ParkWay_NwkState:
        DS 1
        REQUIRE __INIT_XDATA_Z
//  105 
//  106 

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  107 byte ParkWay_TransID;  // This is the unique message ID (counter)
ParkWay_TransID:
        DS 1
        REQUIRE __INIT_XDATA_Z
//  108 

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  109 afAddrType_t ParkWay_DstAddr;
ParkWay_DstAddr:
        DS 12
        REQUIRE __INIT_XDATA_Z
//  110 
//  111 /*********************************************************************
//  112  * LOCAL FUNCTIONS
//  113  */
//  114 void SendUART(uint8 *data,uint8 len);
//  115 void uart_init(void);

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  116 static uint8 DevListPW[20][6];        //Devices Vector for PARK WAY 
DevListPW:
        DS 120
        REQUIRE __INIT_XDATA_Z
//  117 
//  118 static void ParkWay_ProcessZDOMsgs( zdoIncomingMsg_t *inMsg );
//  119 //static void ParkWay_HandleKeys( byte shift, byte keys );
//  120 static void ParkWay_MessageMSGCB( afIncomingMSGPacket_t *pckt );
//  121 //static void ParkWay_SendTheMessage( void );
//  122 
//  123 /*********************************************************************
//  124  * NETWORK LAYER CALLBACKS
//  125  */
//  126 
//  127 /*********************************************************************
//  128  * PUBLIC FUNCTIONS
//  129  */
//  130 
//  131 //Initialization function for the Park Way task. This is called during initialization and should contain any application specific initialization (ie. hardware initialization/setup, table initialization, power up notificaiton ... )

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  132 void ParkWay_Init( uint8 task_id )
ParkWay_Init:
          CFI Block cfiBlock0 Using cfiCommon0
          CFI Function ParkWay_Init
        CODE
//  133 {
        FUNCALL ParkWay_Init, afRegister
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ParkWay_Init, RegisterForKeys
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ParkWay_Init, ZDO_RegisterForZDOMsg
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ParkWay_Init, ZDO_RegisterForZDOMsg
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ParkWay_Init, osal_start_timerEx
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0x9
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 9)
        ; Saved register size: 9
        ; Auto size: 0
        MOV     A,R1
//  134   ParkWay_TaskID = task_id;
        MOV     DPTR,#ParkWay_TaskID
        MOVX    @DPTR,A
//  135   ParkWay_NwkState = DEV_INIT;
        MOV     DPTR,#ParkWay_NwkState
        MOV     A,#0x1
        MOVX    @DPTR,A
//  136   ParkWay_TransID = 0;
        MOV     DPTR,#ParkWay_TransID
        CLR     A
        MOVX    @DPTR,A
//  137 
//  138   // Device hardware initialization can be added here or in main() (Zmain.c).
//  139   // If the hardware is application specific - add it here.
//  140   // If the hardware is other parts of the device add it in main().
//  141 
//  142   ParkWay_DstAddr.addrMode = (afAddrMode_t)AddrNotPresent;
        MOV     DPTR,#ParkWay_DstAddr + 8
        MOVX    @DPTR,A
//  143   ParkWay_DstAddr.endPoint = 0;
        INC     DPTR
        MOVX    @DPTR,A
//  144   ParkWay_DstAddr.addr.shortAddr = 0;
        MOV     DPTR,#ParkWay_DstAddr
        MOVX    @DPTR,A
        INC     DPTR
        MOVX    @DPTR,A
//  145 
//  146   // Fill out the endpoint description.
//  147   ParkWay_epDesc.endPoint = ParkWay_ENDPOINT;
        MOV     DPTR,#ParkWay_epDesc
        MOV     A,#0xa
        MOVX    @DPTR,A
//  148   ParkWay_epDesc.task_id = &ParkWay_TaskID;
        INC     DPTR
        MOV     A,#ParkWay_TaskID & 0xff
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,#(ParkWay_TaskID >> 8) & 0xff
        MOVX    @DPTR,A
//  149   ParkWay_epDesc.simpleDesc
//  150             = (SimpleDescriptionFormat_t *)&ParkWay_SimpleDesc;
        INC     DPTR
        MOV     A,#ParkWay_SimpleDesc & 0xff
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,#(ParkWay_SimpleDesc >> 8) & 0xff
        MOVX    @DPTR,A
//  151   ParkWay_epDesc.latencyReq = noLatencyReqs;
        INC     DPTR
        CLR     A
        MOVX    @DPTR,A
//  152 
//  153   // Register the endpoint description with the AF
//  154   afRegister( &ParkWay_epDesc );
        ; Setup parameters for call to function afRegister
        MOV     R2,#ParkWay_epDesc & 0xff
        MOV     R3,#(ParkWay_epDesc >> 8) & 0xff
        LCALL   ??afRegister?relay   ; Banked call to: afRegister
//  155 
//  156   // Register for all key events - This app will handle all key events
//  157   RegisterForKeys( ParkWay_TaskID );
        ; Setup parameters for call to function RegisterForKeys
        MOV     DPTR,#ParkWay_TaskID
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   ??RegisterForKeys?relay; Banked call to: RegisterForKeys
//  158 
//  159   // Update the display
//  160 #if defined ( LCD_SUPPORTED )
//  161   HalLcdWriteString( "ParkWay-Coord", HAL_LCD_LINE_1 );
//  162 #endif
//  163 
//  164   ZDO_RegisterForZDOMsg( ParkWay_TaskID, End_Device_Bind_rsp );
        ; Setup parameters for call to function ZDO_RegisterForZDOMsg
        MOV     R2,#0x20
        MOV     R3,#-0x80
        MOV     DPTR,#ParkWay_TaskID
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   ??ZDO_RegisterForZDOMsg?relay; Banked call to: ZDO_RegisterForZDOMsg
//  165   ZDO_RegisterForZDOMsg( ParkWay_TaskID, Match_Desc_rsp );
        ; Setup parameters for call to function ZDO_RegisterForZDOMsg
        MOV     R2,#0x6
        MOV     R3,#-0x80
        MOV     DPTR,#ParkWay_TaskID
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   ??ZDO_RegisterForZDOMsg?relay; Banked call to: ZDO_RegisterForZDOMsg
//  166 
//  167   osal_start_timerEx(   ParkWay_TaskID,
//  168                         POLL_PARWAY_EVT,
//  169                         TIME_PARKWAY_POLL);
        ; Setup parameters for call to function osal_start_timerEx
        MOV     R4,#-0x30
        MOV     R5,#0x7
        MOV     R2,#0x3
        MOV     R3,#0x0
        MOV     DPTR,#ParkWay_TaskID
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   ??osal_start_timerEx?relay; Banked call to: osal_start_timerEx
          CFI EndBlock cfiBlock0
//  170 }
        REQUIRE ?Subroutine0
        ; // Fall through to label ?Subroutine0

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine0:
          CFI Block cfiBlock1 Using cfiCommon0
          CFI NoFunction
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 9)
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        MOV     R7,#0x1
        LJMP    ?BANKED_LEAVE_XDATA
          CFI EndBlock cfiBlock1
//  171 
//  172 //Main function to proccess the timers and events 

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  173 uint16 ParkWay_ProcessEvent( uint8 task_id, uint16 events )
ParkWay_ProcessEvent:
          CFI Block cfiBlock2 Using cfiCommon0
          CFI Function ParkWay_ProcessEvent
        CODE
//  174 {
        FUNCALL ParkWay_ProcessEvent, osal_msg_receive
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 13, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 13, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ParkWay_ProcessEvent, osal_msg_deallocate
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 13, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 13, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ParkWay_ProcessEvent, osal_msg_receive
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 13, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 13, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ParkWay_ProcessEvent, ZDO_ParseEPListRsp
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 13, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 13, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ParkWay_ProcessEvent, osal_mem_free
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 13, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 13, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ParkWay_ProcessEvent, osal_start_timerEx
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 13, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 13, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ParkWay_ProcessEvent, uart_init
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 13, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 13, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ParkWay_ProcessEvent, SendUART
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 13, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 13, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ParkWay_ProcessEvent, SendUART
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 13, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 13, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ParkWay_ProcessEvent, SendUART
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 13, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 13, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ParkWay_ProcessEvent, SendUART
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 13, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 13, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        REQUIRE ?V2
        REQUIRE ?V3
        REQUIRE ?V4
        MOV     A,#-0xd
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 13)
        ; Saved register size: 13
        ; Auto size: 0
        MOV     A,R2
        MOV     R6,A
        MOV     A,R3
        MOV     R7,A
//  175   afIncomingMSGPacket_t *MSGpkt;
//  176   //afDataConfirm_t *afDataConfirm;
//  177   //zAddrType_t dstAddr;
//  178   // Data Confirmation message fields
//  179   //byte sentEP;
//  180   //ZStatus_t sentStatus;
//  181   //byte sentTransID;       // This should match the value sent
//  182   (void)task_id;  // Intentionally unreferenced parameter
//  183 
//  184   if ( events & SYS_EVENT_MSG )
        ANL     A,#0x80
        JNZ     $+5
        LJMP    ??ParkWay_ProcessEvent_0 & 0xFFFF
//  185   {
//  186     MSGpkt = (afIncomingMSGPacket_t *)osal_msg_receive( ParkWay_TaskID );
        ; Setup parameters for call to function osal_msg_receive
        SJMP    ??ParkWay_ProcessEvent_1
//  187     while ( MSGpkt )
//  188     {
//  189       switch ( MSGpkt->hdr.event )
//  190       {
//  191         case ZDO_CB_MSG: //Event trigger by ZigBee Device Object like connect, bind...etc
//  192           ParkWay_ProcessZDOMsgs( (zdoIncomingMsg_t *)MSGpkt );
//  193           break;
//  194 
//  195         case AF_DATA_CONFIRM_CMD: //Event trigger by a confirmation of sent message
//  196           break;
//  197 
//  198         case AF_INCOMING_MSG_CMD: //Event trigger by a receive message
//  199           ParkWay_MessageMSGCB( MSGpkt );
??ParkWay_ProcessEvent_2:
        MOV     A,?V0
        ADD     A,#0x22
        MOV     DPL,A
        CLR     A
        ADDC    A,?V1
        MOV     DPH,A
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R1,A
        MOV     DPL,R0
        MOV     DPH,R1
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R2,A
        MOV     B,#0xa
        MOV     DPL,R0
        MOV     DPH,R1
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        MUL     AB
        ADD     A,R2
        ADD     A,#-0x10
        MOV     ?V4,A
        MOV     ?V3,#0x0
??ParkWay_ProcessEvent_3:
        MOV     DPL,?V3
        MOV     R2,DPL
        MOV     A,R0
        ADD     A,R2
        MOV     DPL,A
        CLR     A
        ADDC    A,R1
        MOV     DPH,A
        MOVX    A,@DPTR
        PUSH    A
          CFI CFA_SP SP+-1
        MOV     A,?V4
        MOV     B,#0x6
        MUL     AB
        MOV     R4,A
        MOV     ?V2,B
        MOV     R5,?V2
        MOV     A,#DevListPW & 0xff
        ADD     A,R4
        MOV     R4,A
        MOV     A,#(DevListPW >> 8) & 0xff
        ADDC    A,R5
        MOV     R5,A
        MOV     A,R4
        ADD     A,R2
        MOV     DPL,A
        CLR     A
        ADDC    A,R5
        MOV     DPH,A
        POP     A
          CFI CFA_SP SP+0
        MOVX    @DPTR,A
        INC     ?V3
        MOV     A,?V3
        CLR     C
        SUBB    A,#0x6
        JC      ??ParkWay_ProcessEvent_3
//  200           break;
//  201 
//  202         // case ZDO_STATE_CHANGE:
//  203         //   break;
//  204 
//  205         default:
//  206           break;
//  207       }
//  208 
//  209       // Release the memory
//  210       osal_msg_deallocate( (uint8 *)MSGpkt );
??ParkWay_ProcessEvent_4:
        ; Setup parameters for call to function osal_msg_deallocate
        MOV     R2,?V0
        MOV     R3,?V1
        LCALL   ??osal_msg_deallocate?relay; Banked call to: osal_msg_deallocate
//  211 
//  212       // Next
//  213       MSGpkt = (afIncomingMSGPacket_t *)osal_msg_receive( ParkWay_TaskID );
        ; Setup parameters for call to function osal_msg_receive
??ParkWay_ProcessEvent_1:
        MOV     DPTR,#ParkWay_TaskID
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   ??osal_msg_receive?relay; Banked call to: osal_msg_receive
        MOV     ?V0,R2
        MOV     ?V1,R3
        MOV     A,?V0
        ORL     A,?V1
        JZ      ??ParkWay_ProcessEvent_5
        MOV     DPL,?V0
        MOV     DPH,?V1
        MOVX    A,@DPTR
        ADD     A,#-0x1a
        JNZ     $+5
        LJMP    ??ParkWay_ProcessEvent_2 & 0xFFFF
        ADD     A,#0x47
        JNZ     ??ParkWay_ProcessEvent_4
        MOV     A,?V0
        ADD     A,#0xc
        MOV     DPL,A
        CLR     A
        ADDC    A,?V1
        MOV     DPH,A
        MOVX    A,@DPTR
        XRL     A,#0x6
        JNZ     ??ParkWay_ProcessEvent_6
        INC     DPTR
        MOVX    A,@DPTR
        XRL     A,#0x80
??ParkWay_ProcessEvent_6:
        JNZ     ??ParkWay_ProcessEvent_4
        ; Setup parameters for call to function ZDO_ParseEPListRsp
        MOV     R2,?V0
        MOV     R3,?V1
        LCALL   ??ZDO_ParseEPListRsp?relay; Banked call to: ZDO_ParseEPListRsp
        MOV     A,R2
        ORL     A,R3
        JZ      ??ParkWay_ProcessEvent_4
        MOV     DPL,R2
        MOV     DPH,R3
        MOVX    A,@DPTR
        JNZ     ??ParkWay_ProcessEvent_7
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        JZ      ??ParkWay_ProcessEvent_7
        MOV     DPTR,#ParkWay_DstAddr + 8
        MOV     A,#0x2
        MOVX    @DPTR,A
        MOV     DPL,R2
        MOV     DPH,R3
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R1,A
        MOV     DPTR,#ParkWay_DstAddr
        MOV     A,R0
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R1
        MOVX    @DPTR,A
        MOV     DPL,R2
        MOV     DPH,R3
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        MOV     DPTR,#ParkWay_DstAddr + 9
        MOVX    @DPTR,A
??ParkWay_ProcessEvent_7:
        ; Setup parameters for call to function osal_mem_free
        LCALL   ??osal_mem_free?relay; Banked call to: osal_mem_free
        LJMP    ??ParkWay_ProcessEvent_4 & 0xFFFF
//  214     }
//  215 
//  216     // return unprocessed events
//  217     return (events ^ SYS_EVENT_MSG);
??ParkWay_ProcessEvent_5:
        MOV     A,R6
        MOV     R2,A
        MOV     A,R7
        XRL     A,#0x80
        MOV     R3,A
        LJMP    ??ParkWay_ProcessEvent_8 & 0xFFFF
//  218   }
//  219 
//  220   if(events & POLL_PARWAY_EVT)    //This sequence poll the stack of devices connected, cleaning the flags after print in the UART port
??ParkWay_ProcessEvent_0:
        MOV     A,R6
        ANL     A,#0x3
        JNZ     $+5
        LJMP    ??ParkWay_ProcessEvent_9 & 0xFFFF
//  221   {
//  222     osal_start_timerEx( ParkWay_TaskID,
//  223                         POLL_PARWAY_EVT,
//  224                         TIME_PARKWAY_POLL);
        ; Setup parameters for call to function osal_start_timerEx
        MOV     R4,#-0x30
        MOV     R5,#0x7
        MOV     R2,#0x3
        MOV     R3,#0x0
        MOV     DPTR,#ParkWay_TaskID
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   ??osal_start_timerEx?relay; Banked call to: osal_start_timerEx
//  225     uint8 i,i2;
//  226     uart_init();
        ; Setup parameters for call to function uart_init
        LCALL   ??uart_init?relay    ; Banked call to: uart_init
//  227     SendUART("\n\rAP-0001",9);  
        ; Setup parameters for call to function SendUART
        MOV     R1,#0x9
        MOV     R2,#`?<Constant "\\n\\rAP-0001">` & 0xff
        MOV     R3,#(`?<Constant "\\n\\rAP-0001">` >> 8) & 0xff
        LCALL   ??SendUART?relay     ; Banked call to: SendUART
//  228     for(i=0;i<20;i++)
        MOV     ?V0,#0x0
//  229     {
//  230       if(DevListPW[i][0])
??ParkWay_ProcessEvent_10:
        MOV     A,?V0
        MOV     B,#0x6
        MUL     AB
        MOV     R0,A
        MOV     R1,B
        MOV     A,#DevListPW & 0xff
        ADD     A,R0
        MOV     DPL,A
        MOV     A,#(DevListPW >> 8) & 0xff
        ADDC    A,R1
        MOV     DPH,A
        MOVX    A,@DPTR
        JZ      ??ParkWay_ProcessEvent_11
//  231       {
//  232         SendUART(",",1);  
        ; Setup parameters for call to function SendUART
        MOV     R1,#0x1
        MOV     R2,#`?<Constant ",">` & 0xff
        MOV     R3,#(`?<Constant ",">` >> 8) & 0xff
        LCALL   ??SendUART?relay     ; Banked call to: SendUART
//  233         for(i2=0;i2<6;i2++)
        MOV     ?V1,#0x0
??ParkWay_ProcessEvent_12:
        MOV     ?V2,?V1
        MOV     A,?V0
        MOV     B,#0x6
        MUL     AB
        MOV     R0,A
        MOV     R1,B
        MOV     A,#DevListPW & 0xff
        ADD     A,R0
        MOV     R0,A
        MOV     A,#(DevListPW >> 8) & 0xff
        ADDC    A,R1
        MOV     R1,A
        MOV     A,R0
        ADD     A,?V2
        MOV     R6,A
        CLR     A
        ADDC    A,R1
        MOV     R7,A
        ; Setup parameters for call to function SendUART
        MOV     R1,#0x1
        MOV     A,R6
        MOV     R2,A
        MOV     A,R7
        MOV     R3,A
//  234         {
//  235           SendUART(&DevListPW[i][i2],1);  
        LCALL   ??SendUART?relay     ; Banked call to: SendUART
//  236           DevListPW[i][i2] = 0;
        MOV     DPL,R6
        MOV     DPH,R7
        CLR     A
        MOVX    @DPTR,A
//  237         }
        INC     ?V1
        MOV     A,?V1
        CLR     C
        SUBB    A,#0x6
        JC      ??ParkWay_ProcessEvent_12
//  238       }
//  239     } 
??ParkWay_ProcessEvent_11:
        INC     ?V0
        MOV     A,?V0
        CLR     C
        SUBB    A,#0x14
        JC      ??ParkWay_ProcessEvent_10
//  240     SendUART("@OK",3);
        ; Setup parameters for call to function SendUART
        MOV     R1,#0x3
        MOV     R2,#`?<Constant "@OK">` & 0xff
        MOV     R3,#(`?<Constant "@OK">` >> 8) & 0xff
        LCALL   ??SendUART?relay     ; Banked call to: SendUART
//  241   }  
//  242  
//  243   return 0;
??ParkWay_ProcessEvent_9:
        MOV     R2,#0x0
        MOV     R3,#0x0
??ParkWay_ProcessEvent_8:
        MOV     R7,#0x5
        LJMP    ?BANKED_LEAVE_XDATA
          CFI EndBlock cfiBlock2
//  244 }
//  245 
//  246 
//  247 //This function process the ZDO events to bind
//  248 static void ParkWay_ProcessZDOMsgs( zdoIncomingMsg_t *inMsg )
//  249 {
//  250   switch ( inMsg->clusterID )
//  251   {
//  252     case End_Device_Bind_rsp:
//  253       if ( ZDO_ParseBindRsp( inMsg ) == ZSuccess )
//  254       {
//  255         // Light LED
//  256         //HalLedSet( HAL_LED_1, HAL_LED_MODE_ON );
//  257       }
//  258 #if defined( BLINK_LEDS )
//  259       else
//  260       {
//  261         // Flash LED to show failure
//  262         //HalLedSet ( HAL_LED_1, HAL_LED_MODE_FLASH );
//  263       }
//  264 #endif
//  265       break;
//  266 
//  267     case Match_Desc_rsp:
//  268       {
//  269         ZDO_ActiveEndpointRsp_t *pRsp = ZDO_ParseEPListRsp( inMsg );
//  270         if ( pRsp )
//  271         {
//  272           if ( pRsp->status == ZSuccess && pRsp->cnt )
//  273           {
//  274             ParkWay_DstAddr.addrMode = (afAddrMode_t)Addr16Bit;
//  275             ParkWay_DstAddr.addr.shortAddr = pRsp->nwkAddr;
//  276             // Take the first endpoint, Can be changed to search through endpoints
//  277             ParkWay_DstAddr.endPoint = pRsp->epList[0];
//  278 
//  279             // Light LED
//  280             //HalLedSet( HAL_LED_1, HAL_LED_MODE_ON );
//  281           }
//  282           osal_mem_free( pRsp );
//  283         }
//  284       }
//  285       break;
//  286   }
//  287 }
//  288 
//  289 //This function process the frames received by the application framework (source routers and end devices)
//  290 static void ParkWay_MessageMSGCB( afIncomingMSGPacket_t *pkt_1 )
//  291 {
//  292   uint8* pkt;
//  293   //teste=pkt_1->srcAddr;   //Used to collect que NETWORK ADDRESS of the device connected to the coordinator
//  294   pkt=(pkt_1->cmd.Data);    //Pointer to the data of packet
//  295   
//  296   uint8 i,dev=(((*(pkt+2)-48)*10)+(*(pkt+3)-48));
//  297   
//  298   for(i=0;i<6;i++)
//  299   {
//  300     DevListPW[dev][i]=*(pkt+i);
//  301   } 
//  302 }
//  303 
//  304 

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  305 static void UART_CallBack(uint8 port, uint8 event)
UART_CallBack:
          CFI Block cfiBlock3 Using cfiCommon0
          CFI Function UART_CallBack
        CODE
//  306 {
        FUNCALL UART_CallBack, HalUARTRead
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0x9
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 9)
        ; Saved register size: 9
        ; Auto size: 1
        MOV     A,#-0x1
        LCALL   ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 10)
        MOV     A,R2
        MOV     R7,A
//  307   (void)port;
//  308   //uint8 pData[1];
//  309   uint8 cmdbuff[1];
//  310 
//  311   if (event & (HAL_UART_RX_FULL | HAL_UART_RX_ABOUT_FULL | HAL_UART_RX_TIMEOUT))
        MOV     A,#0x7
        ANL     A,R7
        JZ      ??UART_CallBack_0
//  312   {
//  313     HalUARTRead(port, cmdbuff, 1);
        ; Setup parameters for call to function HalUARTRead
        MOV     R4,#0x1
        MOV     R5,#0x0
        MOV     R2,?XSP + 0
        MOV     R3,?XSP + 1
        LCALL   ??HalUARTRead?relay  ; Banked call to: HalUARTRead
//  314     /************************************************* This was used to send some specific data do the last device connected to the COORDINATOR (HDA)**************************************/
//  315     // if(*cmdbuff==48)
//  316     // {
//  317     //   SendUART("  Desligar",10);
//  318     //   pData[0] = '0';
//  319     //   AF_DataRequest( &teste, &ParkWay_epDesc,
//  320     //                    ParkWay_CLUSTERID,
//  321     //                    (byte)osal_strlen( pData ) + 1,
//  322     //                    (byte *)&pData,
//  323     //                    &ParkWay_TransID,
//  324     //                    AF_DISCV_ROUTE, AF_DEFAULT_RADIUS ); 
//  325     // }
//  326     // else
//  327     // {
//  328     //   SendUART("  Ligar",7);
//  329     //   pData[0] = '1';
//  330     //   AF_DataRequest( &teste, &ParkWay_epDesc,
//  331     //                    ParkWay_CLUSTERID,
//  332     //                    (byte)osal_strlen( pData ) + 1,
//  333     //                    (byte *)&pData,
//  334     //                    &ParkWay_TransID,
//  335     //                    AF_DISCV_ROUTE, AF_DEFAULT_RADIUS ); 
//  336     // }
//  337     // SendUART(cmdbuff,1);
//  338     /*********************************************** This was used to send some specific data do the last device connected to the COORDINATOR (HDA)**************************************/
//  339   }
//  340 }
??UART_CallBack_0:
        MOV     A,#0x1
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 9)
        LJMP    ?Subroutine0 & 0xFFFF
          CFI EndBlock cfiBlock3
//  341 
//  342 //This function initializes the UART

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  343 void uart_init()
uart_init:
          CFI Block cfiBlock4 Using cfiCommon0
          CFI Function uart_init
        CODE
//  344 {
        FUNCALL uart_init, HalUARTOpen
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 29, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 29, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUSH    DPL
          CFI DPL0 Frame(CFA_SP, 4)
          CFI CFA_SP SP+-4
        PUSH    DPH
          CFI DPH0 Frame(CFA_SP, 5)
          CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 29
        MOV     A,#-0x1d
        LCALL   ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 29)
//  345   halUARTCfg_t uartConfig;
//  346   uartConfig.configured = TRUE; // 2x30 don't care - see uart driver.
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     A,#0x1
        MOVX    @DPTR,A
//  347   uartConfig.baudRate = HAL_UART_BR_9600;
        LCALL   ?XSTACK_DISP0_8
        CLR     A
        MOVX    @DPTR,A
//  348   uartConfig.flowControl = TRUE;
        MOV     A,#0x2
        LCALL   ?XSTACK_DISP0_8
        MOV     A,#0x1
        MOVX    @DPTR,A
//  349   uartConfig.flowControlThreshold = 48; // 2x30 don't care - see uart driver.
        MOV     A,#0x3
        LCALL   ?XSTACK_DISP0_8
        MOV     A,#0x30
        MOVX    @DPTR,A
        INC     DPTR
        CLR     A
        MOVX    @DPTR,A
//  350   uartConfig.rx.maxBufSize = 128; // 2x30 don't care - see uart driver.
        MOV     A,#0xa
        LCALL   ?XSTACK_DISP0_8
        MOV     A,#-0x80
        MOVX    @DPTR,A
        INC     DPTR
        CLR     A
        MOVX    @DPTR,A
//  351   uartConfig.tx.maxBufSize = 128; // 2x30 don't care - see uart driver.
        MOV     A,#0x12
        LCALL   ?XSTACK_DISP0_8
        MOV     A,#-0x80
        MOVX    @DPTR,A
        INC     DPTR
        CLR     A
        MOVX    @DPTR,A
//  352   uartConfig.idleTimeout = 6; // 2x30 don't care - see uart driver.
        MOV     A,#0x5
        LCALL   ?XSTACK_DISP0_8
        MOV     A,#0x6
        MOVX    @DPTR,A
//  353   uartConfig.intEnable = TRUE; // 2x30 don't care - see uart driver.
        MOV     A,#0x16
        LCALL   ?XSTACK_DISP0_8
        MOV     A,#0x1
        MOVX    @DPTR,A
//  354   uartConfig.callBackFunc = UART_CallBack;
        MOV     A,#0x1b
        LCALL   ?XSTACK_DISP0_8
        MOV     A,#??UART_CallBack?relay & 0xff
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,#(??UART_CallBack?relay >> 8) & 0xff
        MOVX    @DPTR,A
//  355   HalUARTOpen (HAL_UART_PORT_0, &uartConfig);
        ; Setup parameters for call to function HalUARTOpen
        MOV     R2,?XSP + 0
        MOV     R3,?XSP + 1
        MOV     R1,#0x0
        LCALL   ??HalUARTOpen?relay  ; Banked call to: HalUARTOpen
//  356 }
        MOV     A,#0x1d
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 XSP16+0
        POP     DPH
          CFI DPH0 SameValue
          CFI CFA_SP SP+-4
        POP     DPL
          CFI DPL0 SameValue
          CFI CFA_SP SP+-3
        LJMP    ?BRET
          CFI EndBlock cfiBlock4
//  357 

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  358 void SendUART(uint8 *data,uint8 len)
SendUART:
          CFI Block cfiBlock5 Using cfiCommon0
          CFI Function SendUART
        CODE
//  359 {
        FUNCALL SendUART, HalUARTWrite
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        MOV     A,#-0xa
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 10)
        ; Saved register size: 10
        ; Auto size: 0
        MOV     A,R1
//  360   HalUARTWrite(HAL_UART_PORT_0, data, len);
        ; Setup parameters for call to function HalUARTWrite
        MOV     R4,A
        MOV     R5,#0x0
        MOV     R1,#0x0
        LCALL   ??HalUARTWrite?relay ; Banked call to: HalUARTWrite
//  361 }
        MOV     R7,#0x2
        LJMP    ?BANKED_LEAVE_XDATA
          CFI EndBlock cfiBlock5

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??ParkWay_Init?relay:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    ParkWay_Init

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??ParkWay_ProcessEvent?relay:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    ParkWay_ProcessEvent

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??UART_CallBack?relay:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    UART_CallBack

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??uart_init?relay:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    uart_init

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??SendUART?relay:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    SendUART

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant "\\n\\rAP-0001">`:
        DB "\012\015AP-0001"

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA16
`?<Constant ",">`:
        DB ","

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA32
`?<Constant "@OK">`:
        DB "@OK"

        END
//  362 
//  363 
//  364 /*********************************************************************/
// 
// 696 bytes in segment BANKED_CODE
//  30 bytes in segment BANK_RELAYS
//  30 bytes in segment XDATA_ROM_C
// 141 bytes in segment XDATA_Z
// 
// 726 bytes of CODE  memory
//  30 bytes of CONST memory
// 141 bytes of XDATA memory
//
//Errors: none
//Warnings: none
